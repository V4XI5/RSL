#pragma once
#include "RFGR_Types.h"

/* 632 */
enum prop_type
{
	PROP_TYPE_NONE = 0xFFFFFFFF,
	PROP_TYPE_AMMO = 0x0,
	PROP_TYPE_CLIP = 0x1,
	PROP_TYPE_ACCESSORY1 = 0x2,
	PROP_TYPE_SCOPE = 0x3,
	PROP_TYPE_SILENCER = 0x4,
	PROP_TYPE_CODE_DESIGNATED = 0x5,
	PROP_TYPE_HEAD_PROP = 0x6,
	PROP_TYPE_GRENADE_1 = 0x7,
	PROP_TYPE_GRENADE_2 = 0x8,
	PROP_TYPE_GRENADE_3 = 0x9,
	PROP_TYPE_ACCESSORY_MISC = 0xA,
	PROP_TYPE_SATCHEL_CHARGE = 0xB,
	PROP_TYPE_EYE_WEAR = 0xC,
	PROP_TYPE_TORSO = 0xD,
	PROP_TYPE_EARRING1 = 0xE,
	PROP_TYPE_EARRING2 = 0xF,
	PROP_TYPE_WAIST = 0x10,
	PROP_TYPE_JETPACK = 0x11,
	PROP_TYPE_MP_FLAG = 0x12,
	PROP_TYPE_BACK = 0x13,
	NUM_PROP_TYPES = 0x14,
};

/* 712 */
enum GameState
{
	GS_NONE = 0xFFFFFFFF,
	GS_MAINMENU = 0x0,
	GS_GAMEPLAY = 0x1,
	GS_LOAD = 0x2,
	GS_BOOT = 0x3,
	GS_MULTI_INIT = 0x4,
	GS_MULTI_SHUTDOWN = 0x5,
	GS_CONNECTING_TO_INVITE = 0x6,
	GS_MAINMENU_OPTIONS = 0x7,
	GS_MAINMENU_OPTIONS_DISPLAY = 0x8,
	GS_MAINMENU_OPTIONS_AUDIO = 0x9,
	GS_MAINMENU_OPTIONS_LIVE = 0xA,
	GS_MAINMENU_OPTIONS_LIVE_QUICKMATCH = 0xB,
	GS_MAINMENU_OPTIONS_GAME_OPTIONS = 0xC,
	GS_MAINMENU_OPTIONS_EXTRAS = 0xD,
	GS_CHEATS = 0xE,
	GS_INGAME_OPTIONS = 0xF,
	GS_PLAYER_DEATH_OPTIONS = 0x10,
	GS_SONY_OPTIONS = 0x11,
	GS_CONTROLLER_OPTIONS = 0x12,
	GS_WRECKING_CREW_MAIN_MENU = 0x13,
	GS_WRECKING_CREW_CHARACTER_SELECT = 0x14,
	GS_WRECKING_CREW_SCOREBOARD = 0x15,
	GS_MULTIPLAYER_LIVE = 0x16,
	GS_MULTIPLAYER_CHANGE_MATCHMAKING = 0x17,
	GS_MULTIPLAYER_SEARCH_MATCHMAKING = 0x18,
	GS_MULTIPLAYER_GAME_LOBBY = 0x19,
	GS_MULTIPLAYER_PARTY_LOBBY = 0x1A,
	GS_MULTIPLAYER_PARTY_OPTIONS = 0x1B,
	GS_MULTIPLAYER_SYSLINK = 0x1C,
	GS_MULTIPLAYER_SYSLINK_FIND_SERVERS = 0x1D,
	GS_MULTIPLAYER_CHANGE_GAME_OPTIONS = 0x1E,
	GS_MULTIPLAYER_PLAYER_SELECT = 0x1F,
	GS_MULTIPLAYER_XP_TALLY = 0x20,
	GS_MULTIPLAYER_RESULTS = 0x21,
	GS_MULTIPLAYER_SCOREBOARD = 0x22,
	GS_MULTIPLAYER_STATS = 0x23,
	GS_MULTIPLAYER_TUTORIALS = 0x24,
	GS_INGAME_FULLSCREEN_MAP = 0x25,
	GS_INGAME_MISSION_BRIEFING = 0x26,
	GS_INGAME_ACTIVITY_BRIEFING = 0x27,
	GS_INGAME_MISSION_COMPLETE = 0x28,
	GS_INGAME_ACTIVITY_COMPLETE = 0x29,
	GS_INGAME_UPGRADES_HUD = 0x2A,
	GS_INGAME_HANDBOOK_HUD = 0x2B,
	GS_INGAME_RAIL_DRIVER_HUD = 0x2C,
	GS_INGAME_DISTRICT_LIVERATION = 0x2D,
	GS_INGAME_WEAPON_CABINET = 0x2E,
	GS_LOAD_CUTSCENE = 0x2F,
	GS_MAINMENU_IDLE = 0x30,
	GS_VIDEO_CUTSCENE_PLAY = 0x31,
	GS_SAVE_LOAD_SCREEN = 0x32,
	GS_PS3_DLC = 0x33,
	GS_VIEW_DLC_SCREEN = 0x34,
	GS_STATS_SCREEN = 0x35,
	GS_CREDITS = 0x36,
	GS_VERIFY_SAVEGAME = 0x37,
	GS_SHUTDOWN = 0x38,
	GS_DLC_INIT = 0x39,
	GS_DLC_SHUTDOWN = 0x3A,
	GS_WC_INIT = 0x3B,
	GS_WC_SHUTDOWN = 0x3C,
	GS_RESOLUTION_CHANGE = 0x3D,
	GS_QUICK_PAUSE = 0x3E,
	GS_MULTIPLAYER_LIVE_FIND_SERVERS = 0x3F,
	GS_NUM_STATES = 0x40,
};

/* 715 */
enum human_path_actions
{
	HPA_NORMAL = 0x0,
	HPA_STARTUP = 0x1,
	HPA_WAIT = 0x2,
	HPA_STEER = 0x3,
};

/* 677 */
enum CharacterControllerShapeMode
{
	CSM_STAND = 0x0,
	CSM_CROUCH = 0x1,
	CSM_PRONE = 0x2,
	CSM_STAND_NARROW = 0x3,
	CSM_CROUCH_NARROW = 0x4,
	CSM_VEHICLE = 0x5,
	CSM_DIVE_THROUGH_HOLE = 0x6,
	CSM_JUMP = 0x7,
	NUM_STANDARD_CONTROLLER_SHAPE_MODES = 0x8,
	CSM_DEAD = 0x8,
	NUM_CONTROLLER_SHAPE_MODES = 0x9,
};

/* 604 */
enum AudiolibCuePriority
{
	AUDIOLIB_CUE_PRIORITY_INVALID = 0xFFFFFFFF,
	AUDIOLIB_CUE_PRIORITY_LOW = 0x0,
	AUDIOLIB_CUE_PRIORITY_VOICE_ANIMATION = 0x1,
	AUDIOLIB_CUE_PRIORITY_DIALOGUE_AMBIENT = 0x2,
	AUDIOLIB_CUE_PRIORITY_VOICE_AMBIENT = 0x3,
	AUDIOLIB_CUE_PRIORITY_MEDIUM = 0x4,
	AUDIOLIB_CUE_PRIORITY_DIALOGUE_RADIO = 0x5,
	AUDIOLIB_CUE_PRIORITY_DIALOGUE_NORMAL = 0x6,
	AUDIOLIB_CUE_PRIORITY_HIGH = 0x7,
	AUDIOLIB_CUE_PRIORITY_DIALOGUE_HIGH = 0x8,
	AUDIOLIB_CUE_PRIORITY_DIALOGUE_BRIEFING = 0x9,
	AUDIOLIB_CUE_PRIORITY_VERY_HIGH = 0xA,
	AUDIOLIB_CUE_PRIORITY_MUSIC = 0xB,
	NUM_AUDIOLIB_CUE_PRIORITIES = 0xC,
};

/* 410 */
enum spinebend_interest
{
	SI_CHOOSE_NEW_MAIN_FOCUS_PRIMARY = 0x0,
	SI_CHOOSE_NEW_MAIN_FOCUS = 0x1,
	SI_MAIN_FOCUS_PRIMARY = 0x2,
	SI_MAIN_FOCUS_RANDOM = 0x3,
	SI_HOLDING_FOCUS = 0x4,
	SI_LOCAL_SCANNING = 0x5,
	SI_PANNING_START = 0x6,
	SI_PANNING = 0x7,
	SI_PANNING_GLANCE = 0x8,
	SI_PANNING_FOLLOW = 0x9,
	SI_QUICK_GLANCE = 0xA,
	SI_FOLLOW_EYES = 0xB,
};

enum AnimationAction
{
	ANIMATION_ACTION_NONE = 0xFFFFFFFF,
	ANIMATION_ACTION_IDLE_A = 0x142,
	ANIMATION_ACTION_IDLE_B = 0x143,
	ANIMATION_ACTION_TALK_BRIEF = 0x144,
	ANIMATION_ACTION_SIT_TO_STAND = 0x145,
	ANIMATION_ACTION_STAND_TO_SIT = 0x146,
	ANIMATION_ACTION_SLEEP_TO_STAND = 0x147,
	ANIMATION_ACTION_STAND_TO_SLEEP = 0x148,
	ANIMATION_ACTION_SLEEP_IDLE = 0x149,
	ANIMATION_ACTION_STAND_TO_RUN = 0x14A,
	ANIMATION_ACTION_WALK_TO_RUN = 0x14B,
	ANIMATION_ACTION_RUN_TO_STAND = 0x14C,
	ANIMATION_ACTION_RUN_TO_WALK = 0x14D,
	ANIMATION_ACTION_STAND_TO_CROUCH = 0x14E,
	ANIMATION_ACTION_CROUCH_TO_STAND = 0x14F,
	ANIMATION_ACTION_STAND_READY_TO_CROUCH_READY = 0x150,
	ANIMATION_ACTION_CROUCH_READY_TO_STAND_READY = 0x151,
	ANIMATION_ACTION_STAND_TO_STAND_READY = 0x152,
	ANIMATION_ACTION_CROUCH_TO_CROUCH_READY = 0x153,
	ANIMATION_ACTION_STAND_READY_TO_STAND = 0x154,
	ANIMATION_ACTION_CROUCH_READY_TO_CROUCH = 0x155,
	ANIMATION_ACTION_GUARD_LOOK_AROUND = 0x156,
	ANIMATION_ACTION_GUARD_CHECK_WEAPON = 0x157,
	ANIMATION_ACTION_GUARD_SHADE_EYES = 0x158,
	ANIMATION_ACTION_GUARD_WEAPON_MOTION = 0x159,
	ANIMATION_ACTION_GUARD_SHOVE = 0x15A,
	ANIMATION_ACTION_GUARD_BEAT_DOWN = 0x15B,
	ANIMATION_ACTION_GUARD_WARNING_SHOT = 0x15C,
	ANIMATION_ACTION_GUARD_THREATEN = 0x15D,
	ANIMATION_ACTION_GUARD_INSPECT = 0x15E,
	ANIMATION_ACTION_GUARD_POINT = 0x15F,
	ANIMATION_ACTION_STAND_COWER_INCOMING_FRONT = 0x160,
	ANIMATION_ACTION_STAND_COWER_INCOMING_LEFT = 0x161,
	ANIMATION_ACTION_STAND_COWER_INCOMING_RIGHT = 0x162,
	ANIMATION_ACTION_COWER_TO_STAND = 0x163,
	ANIMATION_ACTION_STAND_TO_COWER = 0x164,
	ANIMATION_ACTION_STAND_TO_PRONE = 0x165,
	ANIMATION_ACTION_FACEDOWN_TO_FETAL = 0x166,
	ANIMATION_ACTION_FACEUP_TO_FETAL = 0x167,
	ANIMATION_ACTION_FETAL_FLINCH = 0x168,
	ANIMATION_ACTION_REACT_AND_FLEE = 0x169,
	ANIMATION_ACTION_CALM_FALL = 0x16A,
	ANIMATION_ACTION_CALM_FALL_RUN = 0x16B,
	ANIMATION_ACTION_LAND_NORMAL = 0x16C,
	ANIMATION_ACTION_LAND_NORMAL_STOP = 0x16D,
	ANIMATION_ACTION_LAND_RUN = 0x16E,
	ANIMATION_ACTION_LAND_RUN_STOP = 0x16F,
	ANIMATION_ACTION_LAND_HARD = 0x170,
	ANIMATION_ACTION_LAND_HARD_SLAM = 0x171,
	ANIMATION_ACTION_LAND_MELEE_RUN = 0x172,
	ANIMATION_ACTION_LAND_MELEE_STOP = 0x173,
	ANIMATION_ACTION_LAND_MELEE_HARD = 0x174,
	ANIMATION_ACTION_LAND_LIGHT = 0x175,
	ANIMATION_ACTION_STAND_SHUFFLE_LEFT = 0x176,
	ANIMATION_ACTION_STAND_SHUFFLE_RIGHT = 0x177,
	ANIMATION_ACTION_STAND_READY_SHUFFLE_LEFT = 0x178,
	ANIMATION_ACTION_STAND_READY_SHUFFLE_RIGHT = 0x179,
	ANIMATION_ACTION_STAND_SHUFFLE_LEFT_180 = 0x17A,
	ANIMATION_ACTION_STAND_SHUFFLE_RIGHT_180 = 0x17B,
	ANIMATION_ACTION_CROUCH_SHUFFLE_LEFT = 0x17C,
	ANIMATION_ACTION_CROUCH_SHUFFLE_RIGHT = 0x17D,
	ANIMATION_ACTION_CROUCH_READY_SHUFFLE_LEFT = 0x17E,
	ANIMATION_ACTION_CROUCH_READY_SHUFFLE_RIGHT = 0x17F,
	ANIMATION_ACTION_CROUCH_SHUFFLE_LEFT_180 = 0x180,
	ANIMATION_ACTION_CROUCH_SHUFFLE_RIGHT_180 = 0x181,
	ANIMATION_ACTION_COMBAT_ROLL_LEFT = 0x182,
	ANIMATION_ACTION_COMBAT_ROLL_RIGHT = 0x183,
	ANIMATION_ACTION_STAND_DODGE_LEFT = 0x184,
	ANIMATION_ACTION_STAND_DODGE_RIGHT = 0x185,
	ANIMATION_ACTION_RUN_DODGE_LEFT = 0x186,
	ANIMATION_ACTION_RUN_DODGE_RIGHT = 0x187,
	ANIMATION_ACTION_SPIN_DODGE = 0x188,
	ANIMATION_ACTION_SPIN_DODGE_MOVING = 0x189,
	ANIMATION_ACTION_DIVE = 0x18A,
	ANIMATION_ACTION_DIVE_A = 0x18B,
	ANIMATION_ACTION_JUMP_FROM_BUILDING = 0x18C,
	ANIMATION_ACTION_LAND_FROM_BUILDING = 0x18D,
	ANIMATION_ACTION_LEAP_OVER = 0x18E,
	ANIMATION_ACTION_LEAP_OVER_2 = 0x18F,
	ANIMATION_ACTION_JUMP_DOWN = 0x190,
	ANIMATION_ACTION_RUN_JUMP_START = 0x191,
	ANIMATION_ACTION_STAND_JUMP_START = 0x192,
	ANIMATION_ACTION_TURN_LEFT_WALK = 0x193,
	ANIMATION_ACTION_TURN_RIGHT_WALK = 0x194,
	ANIMATION_ACTION_TURN_BACK_WALK = 0x195,
	ANIMATION_ACTION_TURN_LEFT_RUN = 0x196,
	ANIMATION_ACTION_TURN_RIGHT_RUN = 0x197,
	ANIMATION_ACTION_TURN_BACK_RUN = 0x198,
	ANIMATION_ACTION_STAND_FIRE = 0x199,
	ANIMATION_ACTION_WALK_FIRE = 0x19A,
	ANIMATION_ACTION_WALK_FIRE_BACK = 0x19B,
	ANIMATION_ACTION_WALK_FIRE_LEFT = 0x19C,
	ANIMATION_ACTION_WALK_FIRE_RIGHT = 0x19D,
	ANIMATION_ACTION_RUN_FIRE = 0x19E,
	ANIMATION_ACTION_RUN_FIRE_BACK = 0x19F,
	ANIMATION_ACTION_RUN_FIRE_LEFT = 0x1A0,
	ANIMATION_ACTION_RUN_FIRE_RIGHT = 0x1A1,
	ANIMATION_ACTION_CROUCH_FIRE = 0x1A2,
	ANIMATION_ACTION_CROUCH_WALK_FIRE = 0x1A3,
	ANIMATION_ACTION_CROUCH_WALK_FIRE_LEFT = 0x1A4,
	ANIMATION_ACTION_CROUCH_WALK_FIRE_RIGHT = 0x1A5,
	ANIMATION_ACTION_CROUCH_WALK_FIRE_BACK = 0x1A6,
	ANIMATION_ACTION_DRIVE_FIRE = 0x1A7,
	ANIMATION_ACTION_DRIVE_FIRE_LEFT = 0x1A8,
	ANIMATION_ACTION_DRIVE_FIRE_RIGHT = 0x1A9,
	ANIMATION_ACTION_RIDE_FIRE = 0x1AA,
	ANIMATION_ACTION_RIDE_FIRE_LEFT = 0x1AB,
	ANIMATION_ACTION_RIDE_FIRE_RIGHT = 0x1AC,
	ANIMATION_ACTION_RIDE_FIRE_BACK = 0x1AD,
	ANIMATION_ACTION_RIDE_LEFT_FIRE = 0x1AE,
	ANIMATION_ACTION_RIDE_LEFT_FIRE_LEFT = 0x1AF,
	ANIMATION_ACTION_RIDE_LEFT_FIRE_RIGHT = 0x1B0,
	ANIMATION_ACTION_RIDE_LEFT_FIRE_BACK = 0x1B1,
	ANIMATION_ACTION_COVER_STAND_LEFT_LEAN_FIRE = 0x1B2,
	ANIMATION_ACTION_COVER_STAND_LEFT_STEPOUT_FIRE = 0x1B3,
	ANIMATION_ACTION_COVER_STAND_LEFT_BLIND_FIRE = 0x1B4,
	ANIMATION_ACTION_COVER_STAND_LEFT_AIM_FIRE = 0x1B5,
	ANIMATION_ACTION_COVER_STAND_LEFT_AIM_WALK_FIRE = 0x1B6,
	ANIMATION_ACTION_COVER_STAND_LEFT_AIM_WALK_BACK_FIRE = 0x1B7,
	ANIMATION_ACTION_COVER_STAND_RIGHT_LEAN_FIRE = 0x1B8,
	ANIMATION_ACTION_COVER_STAND_RIGHT_STEPOUT_FIRE = 0x1B9,
	ANIMATION_ACTION_COVER_STAND_RIGHT_BLIND_FIRE = 0x1BA,
	ANIMATION_ACTION_COVER_STAND_RIGHT_AIM_FIRE = 0x1BB,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_AIM_FIRE = 0x1BC,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_AIM_FIRE = 0x1BD,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_TO_READY = 0x1BE,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_TO_READY = 0x1BF,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_LEAN_FIRE = 0x1C0,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_STEPOUT_FIRE = 0x1C1,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_BLIND_FIRE = 0x1C2,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_LEANUP_FIRE = 0x1C3,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_LEAN_FIRE = 0x1C4,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_STEPOUT_FIRE = 0x1C5,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_BLIND_FIRE = 0x1C6,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_LEANUP_FIRE = 0x1C7,
	ANIMATION_ACTION_COVER_CROUCH_READY_LEFT_WALK_FIRE = 0x1C8,
	ANIMATION_ACTION_COVER_CROUCH_READY_LEFT_FIRE = 0x1C9,
	ANIMATION_ACTION_COVER_CROUCH_READY_RIGHT_WALK_FIRE = 0x1CA,
	ANIMATION_ACTION_COVER_CROUCH_READY_RIGHT_FIRE = 0x1CB,
	ANIMATION_ACTION_COVER_CROUCH_BLIND_LEFT_FIRE = 0x1CC,
	ANIMATION_ACTION_COVER_CROUCH_BLIND_RIGHT_FIRE = 0x1CD,
	ANIMATION_ACTION_COVER_CROUCH_BLIND_LEFT_WALK_FIRE = 0x1CE,
	ANIMATION_ACTION_COVER_CROUCH_BLIND_RIGHT_WALK_FIRE = 0x1CF,
	ANIMATION_ACTION_COVER_STAND_EXIT_LEFT = 0x1D0,
	ANIMATION_ACTION_COVER_STAND_EXIT_RIGHT = 0x1D1,
	ANIMATION_ACTION_COVER_CROUCH_EXIT_LEFT = 0x1D2,
	ANIMATION_ACTION_COVER_CROUCH_EXIT_RIGHT = 0x1D3,
	ANIMATION_ACTION_COVER_CROUCH_EXIT_DIVE = 0x1D4,
	ANIMATION_ACTION_COVER_CROUCH_EXIT_DIVE_LEFT = 0x1D5,
	ANIMATION_ACTION_FLINCH_FACE = 0x1D6,
	ANIMATION_ACTION_FLINCH_HEAD_FORWARD = 0x1D7,
	ANIMATION_ACTION_FLINCH_HEAD_BACKWARD = 0x1D8,
	ANIMATION_ACTION_FLINCH_HEAD_RIGHT = 0x1D9,
	ANIMATION_ACTION_FLINCH_HEAD_LEFT = 0x1DA,
	ANIMATION_ACTION_FLINCH_TORSO_FORWARD = 0x1DB,
	ANIMATION_ACTION_FLINCH_TORSO_BACKWARD = 0x1DC,
	ANIMATION_ACTION_FLINCH_TORSO_RIGHT = 0x1DD,
	ANIMATION_ACTION_FLINCH_TORSO_LEFT = 0x1DE,
	ANIMATION_ACTION_FLINCH_PELVIS_FORWARD = 0x1DF,
	ANIMATION_ACTION_FLINCH_PELVIS_BACKWARD = 0x1E0,
	ANIMATION_ACTION_FLINCH_PELVIS_RIGHT = 0x1E1,
	ANIMATION_ACTION_FLINCH_PELVIS_LEFT = 0x1E2,
	ANIMATION_ACTION_FLINCH_BODY = 0x1E3,
	ANIMATION_ACTION_FLINCH_SLIGHT_HEAD_FORWARD = 0x1E4,
	ANIMATION_ACTION_FLINCH_SLIGHT_HEAD_BACKWARD = 0x1E5,
	ANIMATION_ACTION_FLINCH_SLIGHT_HEAD_RIGHT = 0x1E6,
	ANIMATION_ACTION_FLINCH_SLIGHT_HEAD_LEFT = 0x1E7,
	ANIMATION_ACTION_FLINCH_SLIGHT_TORSO_FORWARD = 0x1E8,
	ANIMATION_ACTION_FLINCH_SLIGHT_TORSO_BACKWARD = 0x1E9,
	ANIMATION_ACTION_FLINCH_SLIGHT_TORSO_RIGHT = 0x1EA,
	ANIMATION_ACTION_FLINCH_SLIGHT_TORSO_LEFT = 0x1EB,
	ANIMATION_ACTION_FLINCH_SLIGHT_PELVIS_FORWARD = 0x1EC,
	ANIMATION_ACTION_FLINCH_SLIGHT_PELVIS_BACKWARD = 0x1ED,
	ANIMATION_ACTION_FLINCH_SLIGHT_PELVIS_RIGHT = 0x1EE,
	ANIMATION_ACTION_FLINCH_SLIGHT_PELVIS_LEFT = 0x1EF,
	ANIMATION_ACTION_FLINCH_SLIGHT_CROUCH_FORWARD = 0x1F0,
	ANIMATION_ACTION_FLINCH_SLIGHT_CROUCH_BACKWARD = 0x1F1,
	ANIMATION_ACTION_FLINCH_SLIGHT_CROUCH_RIGHT = 0x1F2,
	ANIMATION_ACTION_FLINCH_SLIGHT_CROUCH_LEFT = 0x1F3,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_PELVIS_FORWARD = 0x1F4,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_PELVIS_BACK = 0x1F5,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_PELVIS_RIGHT = 0x1F6,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_PELVIS_LEFT = 0x1F7,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_TORSO_FORWARD = 0x1F8,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_TORSO_BACK = 0x1F9,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_TORSO_RIGHT = 0x1FA,
	ANIMATION_ACTION_NONCOMBAT_FLINCH_TORSO_LEFT = 0x1FB,
	ANIMATION_ACTION_EQUIP = 0x1FC,
	ANIMATION_ACTION_UNEQUIP = 0x1FD,
	ANIMATION_ACTION_MOVE_EQUIP = 0x1FE,
	ANIMATION_ACTION_MOVE_UNEQUIP = 0x1FF,
	ANIMATION_ACTION_CROUCH_EQUIP = 0x200,
	ANIMATION_ACTION_CROUCH_UNEQUIP = 0x201,
	ANIMATION_ACTION_CROUCH_MOVE_EQUIP = 0x202,
	ANIMATION_ACTION_CROUCH_MOVE_UNEQUIP = 0x203,
	ANIMATION_ACTION_COVER_CROUCH_EQUIP_LEFT = 0x204,
	ANIMATION_ACTION_COVER_CROUCH_EQUIP_RIGHT = 0x205,
	ANIMATION_ACTION_COVER_STAND_EQUIP_LEFT = 0x206,
	ANIMATION_ACTION_COVER_STAND_EQUIP_RIGHT = 0x207,
	ANIMATION_ACTION_LOOK_LEFT = 0x208,
	ANIMATION_ACTION_LOOK_RIGHT = 0x209,
	ANIMATION_ACTION_RELOAD = 0x20A,
	ANIMATION_ACTION_WALK_RELOAD = 0x20B,
	ANIMATION_ACTION_RUN_RELOAD = 0x20C,
	ANIMATION_ACTION_CROUCH_RELOAD = 0x20D,
	ANIMATION_ACTION_CROUCH_WALK_RELOAD = 0x20E,
	ANIMATION_ACTION_VEHICLE_RELOAD = 0x20F,
	ANIMATION_ACTION_PASSENGER_RELOAD = 0x210,
	ANIMATION_ACTION_DPASSENGER_RELOAD = 0x211,
	ANIMATION_ACTION_COVER_STAND_RELOAD_LEFT = 0x212,
	ANIMATION_ACTION_COVER_CROUCH_RELOAD_LEFT = 0x213,
	ANIMATION_ACTION_COVER_STAND_RELOAD_RIGHT = 0x214,
	ANIMATION_ACTION_COVER_CROUCH_RELOAD_RIGHT = 0x215,
	ANIMATION_ACTION_MELEE = 0x216,
	ANIMATION_ACTION_MELEE2 = 0x217,
	ANIMATION_ACTION_MELEE3 = 0x218,
	ANIMATION_ACTION_MELEE4 = 0x219,
	ANIMATION_ACTION_MELEE_MOVING = 0x21A,
	ANIMATION_ACTION_MELEE_AIR = 0x21B,
	ANIMATION_ACTION_CROUCH_MELEE = 0x21C,
	ANIMATION_ACTION_CROUCH_MELEE_MOVING = 0x21D,
	ANIMATION_ACTION_MELEE_FAST = 0x21E,
	ANIMATION_ACTION_MELEE_FAST_FAST = 0x21F,
	ANIMATION_ACTION_MELEE_FAST_FAST_FAST = 0x220,
	ANIMATION_ACTION_MELEE_FAST_FAST_SLOW = 0x221,
	ANIMATION_ACTION_MELEE_FAST_SLOW = 0x222,
	ANIMATION_ACTION_MELEE_FAST_SLOW_FAST = 0x223,
	ANIMATION_ACTION_MELEE_FAST_SLOW_SLOW = 0x224,
	ANIMATION_ACTION_MELEE_SLOW = 0x225,
	ANIMATION_ACTION_MELEE_SLOW_FAST = 0x226,
	ANIMATION_ACTION_MELEE_SLOW_FAST_FAST = 0x227,
	ANIMATION_ACTION_MELEE_SLOW_FAST_SLOW = 0x228,
	ANIMATION_ACTION_MELEE_SLOW_SLOW = 0x229,
	ANIMATION_ACTION_MELEE_SLOW_SLOW_FAST = 0x22A,
	ANIMATION_ACTION_MELEE_SLOW_SLOW_SLOW = 0x22B,
	ANIMATION_ACTION_BLOCK_FLINCH_HIGH = 0x22C,
	ANIMATION_ACTION_BLOCK_FLINCH_LOW = 0x22D,
	ANIMATION_ACTION_BK_FALLDOWN = 0x22E,
	ANIMATION_ACTION_BK_GETUP = 0x22F,
	ANIMATION_ACTION_FW_FALLDOWN = 0x230,
	ANIMATION_ACTION_FW_GETUP = 0x231,
	ANIMATION_ACTION_FALLDOWN_BEHIND = 0x232,
	ANIMATION_ACTION_FW_NUDGE_BY_CAR = 0x233,
	ANIMATION_ACTION_IMPACT_FROM_FRONT = 0x234,
	ANIMATION_ACTION_IMPACT_FROM_BACK = 0x235,
	ANIMATION_ACTION_COMBAT_TO_STAND = 0x236,
	ANIMATION_ACTION_DIVE_FOR_COVER = 0x237,
	ANIMATION_ACTION_STAND_GO_PRONE = 0x238,
	ANIMATION_ACTION_KNEEL_GO_PRONE = 0x239,
	ANIMATION_ACTION_PRONE_TO_KNEEL = 0x23A,
	ANIMATION_ACTION_SCRAMBLE_TO_FEET = 0x23B,
	ANIMATION_ACTION_DEATH = 0x23C,
	ANIMATION_ACTION_DEATH_PELVIS_FORWARD = 0x23D,
	ANIMATION_ACTION_DEATH_PELVIS_BACK = 0x23E,
	ANIMATION_ACTION_DEATH_PELVIS_LEFT = 0x23F,
	ANIMATION_ACTION_DEATH_PELVIS_RIGHT = 0x240,
	ANIMATION_ACTION_DEATH_TORSO_FORWARD = 0x241,
	ANIMATION_ACTION_DEATH_TORSO_BACK = 0x242,
	ANIMATION_ACTION_DEATH_TORSO_LEFT = 0x243,
	ANIMATION_ACTION_DEATH_TORSO_RIGHT = 0x244,
	ANIMATION_ACTION_DEATH_HEAD_FORWARD = 0x245,
	ANIMATION_ACTION_DEATH_HEAD_BACK = 0x246,
	ANIMATION_ACTION_DEATH_HEAD_LEFT = 0x247,
	ANIMATION_ACTION_DEATH_HEAD_RIGHT = 0x248,
	ANIMATION_ACTION_CROUCH_DEATH_PELVIS_FORWARD = 0x249,
	ANIMATION_ACTION_CROUCH_DEATH_PELVIS_BACK = 0x24A,
	ANIMATION_ACTION_CROUCH_DEATH_PELVIS_LEFT = 0x24B,
	ANIMATION_ACTION_CROUCH_DEATH_PELVIS_RIGHT = 0x24C,
	ANIMATION_ACTION_CROUCH_DEATH_TORSO_FORWARD = 0x24D,
	ANIMATION_ACTION_CROUCH_DEATH_TORSO_BACK = 0x24E,
	ANIMATION_ACTION_CROUCH_DEATH_TORSO_LEFT = 0x24F,
	ANIMATION_ACTION_CROUCH_DEATH_TORSO_RIGHT = 0x250,
	ANIMATION_ACTION_CROUCH_DEATH_HEAD_FORWARD = 0x251,
	ANIMATION_ACTION_CROUCH_DEATH_HEAD_BACK = 0x252,
	ANIMATION_ACTION_CROUCH_DEATH_HEAD_LEFT = 0x253,
	ANIMATION_ACTION_CROUCH_DEATH_HEAD_RIGHT = 0x254,
	ANIMATION_ACTION_READY_FLINCH_FACE = 0x255,
	ANIMATION_ACTION_READY_FLINCH_MID = 0x256,
	ANIMATION_ACTION_STAND_FLINCH_FACE = 0x257,
	ANIMATION_ACTION_STAND_FLINCH_MID = 0x258,
	ANIMATION_ACTION_CROUCH_FLINCH_BODY = 0x259,
	ANIMATION_ACTION_STUNGUN_FLINCH = 0x25A,
	ANIMATION_ACTION_EXPLOSION_FLINCH_FRONT = 0x25B,
	ANIMATION_ACTION_EXPLOSION_FLINCH_BACK = 0x25C,
	ANIMATION_ACTION_EXPLOSION_FLINCH_LEFT = 0x25D,
	ANIMATION_ACTION_EXPLOSION_FLINCH_RIGHT = 0x25E,
	ANIMATION_ACTION_EXPLOSION_STUMBLE_FRONT = 0x25F,
	ANIMATION_ACTION_EXPLOSION_STUMBLE_BACK = 0x260,
	ANIMATION_ACTION_EXPLOSION_STUMBLE_LEFT = 0x261,
	ANIMATION_ACTION_EXPLOSION_STUMBLE_RIGHT = 0x262,
	ANIMATION_ACTION_EXPLOSION_DUCK_FRONT = 0x263,
	ANIMATION_ACTION_EXPLOSION_DUCK_BACK = 0x264,
	ANIMATION_ACTION_EXPLOSION_DUCK_LEFT = 0x265,
	ANIMATION_ACTION_EXPLOSION_DUCK_RIGHT = 0x266,
	ANIMATION_ACTION_EXPLOSION_KNOCKDOWN_FRONT = 0x267,
	ANIMATION_ACTION_EXPLOSION_KNOCKDOWN_BACK = 0x268,
	ANIMATION_ACTION_EXPLOSION_KNOCKDOWN_LEFT = 0x269,
	ANIMATION_ACTION_EXPLOSION_KNOCKDOWN_RIGHT = 0x26A,
	ANIMATION_ACTION_CROUCH_FLINCH_FRONT = 0x26B,
	ANIMATION_ACTION_CROUCH_FLINCH_BACK = 0x26C,
	ANIMATION_ACTION_CROUCH_FLINCH_LEFT = 0x26D,
	ANIMATION_ACTION_CROUCH_FLINCH_RIGHT = 0x26E,
	ANIMATION_ACTION_TOSS_ITEM = 0x26F,
	ANIMATION_ACTION_THROW_ITEM = 0x270,
	ANIMATION_ACTION_PLACE_ITEM = 0x271,
	ANIMATION_ACTION_PLANT_BOMB = 0x272,
	ANIMATION_ACTION_THROW_ITEM_DRIVE = 0x273,
	ANIMATION_ACTION_THROW_ITEM_DRIVE_LEFT = 0x274,
	ANIMATION_ACTION_THROW_ITEM_DRIVE_RIGHT = 0x275,
	ANIMATION_ACTION_THROW_ITEM_MOVE_FORWARD = 0x276,
	ANIMATION_ACTION_THROW_ITEM_MOVE_BACK = 0x277,
	ANIMATION_ACTION_THROW_ITEM_MOVE_LEFT = 0x278,
	ANIMATION_ACTION_THROW_ITEM_MOVE_RIGHT = 0x279,
	ANIMATION_ACTION_THROW_CROUCH = 0x27A,
	ANIMATION_ACTION_THROW_GRENADE = 0x27B,
	ANIMATION_ACTION_ROLL_GRENADE = 0x27C,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_THROW_GRENADE = 0x27D,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_THROW_GRENADE = 0x27E,
	ANIMATION_ACTION_COVER_STAND_RIGHT_THROW_GRENADE = 0x27F,
	ANIMATION_ACTION_COVER_STAND_LEFT_THROW_GRENADE = 0x280,
	ANIMATION_ACTION_LOOK_AROUND = 0x281,
	ANIMATION_ACTION_POINT_LEFT = 0x282,
	ANIMATION_ACTION_POINT_RIGHT = 0x283,
	ANIMATION_ACTION_POINT_AHEAD = 0x284,
	ANIMATION_ACTION_BATTLE_CRY = 0x285,
	ANIMATION_ACTION_COMBAT_CHEER = 0x286,
	ANIMATION_ACTION_COMBAT_RUN_CHEER = 0x287,
	ANIMATION_ACTION_TAUNT = 0x288,
	ANIMATION_ACTION_TAUNT_ALT = 0x289,
	ANIMATION_ACTION_WALKING_TAUNT = 0x28A,
	ANIMATION_ACTION_TALK_YELL = 0x28B,
	ANIMATION_ACTION_MOTION_TO_MOVE = 0x28C,
	ANIMATION_ACTION_SHOVE_CIVILIAN = 0x28D,
	ANIMATION_ACTION_BEAT_CIVILIAN = 0x28E,
	ANIMATION_ACTION_STOMP = 0x28F,
	ANIMATION_ACTION_KICK = 0x290,
	ANIMATION_ACTION_CHECK_ID = 0x291,
	ANIMATION_ACTION_CHECK_ID_APPROVED = 0x292,
	ANIMATION_ACTION_CHECK_ID_DENIED = 0x293,
	ANIMATION_ACTION_REACT_ANGRY_A = 0x294,
	ANIMATION_ACTION_REACT_ANGRY_B = 0x295,
	ANIMATION_ACTION_REACT_ANGRY_C = 0x296,
	ANIMATION_ACTION_REACT_ANGRY_D = 0x297,
	ANIMATION_ACTION_REACT_SHOVED = 0x298,
	ANIMATION_ACTION_REACT_SURPRISED = 0x299,
	ANIMATION_ACTION_GIVE_ID = 0x29A,
	ANIMATION_ACTION_GIVE_ID_APPROVED = 0x29B,
	ANIMATION_ACTION_GIVE_ID_DENIED = 0x29C,
	ANIMATION_ACTION_START_TURN_LEFT = 0x29D,
	ANIMATION_ACTION_START_TURN_RIGHT = 0x29E,
	ANIMATION_ACTION_END_TURN_LEFT = 0x29F,
	ANIMATION_ACTION_END_TURN_RIGHT = 0x2A0,
	ANIMATION_ACTION_PISTOL_END_TURN_LEFT = 0x2A1,
	ANIMATION_ACTION_PISTOL_END_TURN_RIGHT = 0x2A2,
	ANIMATION_ACTION_MORPH1 = 0x2A3,
	ANIMATION_ACTION_CUSTOM = 0x2A4,
	ANIMATION_ACTION_FLINCH_TEST = 0x2A5,
	ANIMATION_ACTION_TAG = 0x2A6,
	ANIMATION_ACTION_WALK_STOP = 0x2A7,
	ANIMATION_ACTION_STAND_TURN = 0x2A8,
	ANIMATION_ACTION_RUN_STOP = 0x2A9,
	ANIMATION_ACTION_RUNNING_TURN = 0x2AA,
	ANIMATION_ACTION_RUNNING_TURN_RIGHT = 0x2AB,
	ANIMATION_ACTION_RUNNING_TURN_LEFT = 0x2AC,
	ANIMATION_ACTION_RUNNING_TURN_BACK = 0x2AD,
	ANIMATION_ACTION_RUN_BACK_TO_LEFT = 0x2AE,
	ANIMATION_ACTION_RUN_LEFT_TO_BACK = 0x2AF,
	ANIMATION_ACTION_COVER_INTO_STAND_LEFT = 0x2B0,
	ANIMATION_ACTION_COVER_INTO_STAND_RIGHT = 0x2B1,
	ANIMATION_ACTION_COVER_INTO_CROUCH_LEFT = 0x2B2,
	ANIMATION_ACTION_COVER_INTO_CROUCH_RIGHT = 0x2B3,
	ANIMATION_ACTION_COVER_INTO_STAND_LEFT_SIDE = 0x2B4,
	ANIMATION_ACTION_COVER_INTO_STAND_RIGHT_SIDE = 0x2B5,
	ANIMATION_ACTION_COVER_INTO_CROUCH_LEFT_SIDE = 0x2B6,
	ANIMATION_ACTION_COVER_INTO_CROUCH_RIGHT_SIDE = 0x2B7,
	ANIMATION_ACTION_COVER_STAND_LEFT_LEAN_OUT = 0x2B8,
	ANIMATION_ACTION_COVER_STAND_LEFT_LEAN_IN = 0x2B9,
	ANIMATION_ACTION_COVER_STAND_LEFT_STEP_OUT = 0x2BA,
	ANIMATION_ACTION_COVER_STAND_LEFT_STEP_IN = 0x2BB,
	ANIMATION_ACTION_COVER_STAND_RIGHT_LEAN_OUT = 0x2BC,
	ANIMATION_ACTION_COVER_STAND_RIGHT_LEAN_IN = 0x2BD,
	ANIMATION_ACTION_COVER_STAND_RIGHT_STEP_OUT = 0x2BE,
	ANIMATION_ACTION_COVER_STAND_RIGHT_STEP_IN = 0x2BF,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_LEAN_OUT = 0x2C0,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_LEAN_IN = 0x2C1,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_STEP_OUT = 0x2C2,
	ANIMATION_ACTION_COVER_CROUCH_LEFT_STEP_IN = 0x2C3,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_LEAN_OUT = 0x2C4,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_LEAN_IN = 0x2C5,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_STEP_OUT = 0x2C6,
	ANIMATION_ACTION_COVER_CROUCH_RIGHT_STEP_IN = 0x2C7,
	ANIMATION_ACTION_OPEN_DOOR_INSIDE_1 = 0x2C8,
	ANIMATION_ACTION_OPEN_DOOR_INSIDE_2 = 0x2C9,
	ANIMATION_ACTION_OPEN_DOOR_INSIDE_3 = 0x2CA,
	ANIMATION_ACTION_OPEN_DOOR_OUTSIDE_1 = 0x2CB,
	ANIMATION_ACTION_OPEN_DOOR_OUTSIDE_2 = 0x2CC,
	ANIMATION_ACTION_OPEN_DOOR_OUTSIDE_3 = 0x2CD,
	ANIMATION_ACTION_OPEN_DOOR_OUTSIDE_4 = 0x2CE,
	ANIMATION_ACTION_CLOSE_DOOR_INSIDE_1 = 0x2CF,
	ANIMATION_ACTION_CLOSE_DOOR_INSIDE_2 = 0x2D0,
	ANIMATION_ACTION_CLOSE_DOOR_INSIDE_3 = 0x2D1,
	ANIMATION_ACTION_CLOSE_DOOR_INSIDE_4 = 0x2D2,
	ANIMATION_ACTION_CLOSE_DOOR_OUTSIDE_1 = 0x2D3,
	ANIMATION_ACTION_CLOSE_DOOR_OUTSIDE_2 = 0x2D4,
	ANIMATION_ACTION_CLOSE_DOOR_OUTSIDE_3 = 0x2D5,
	ANIMATION_ACTION_EXIT_DRIVER = 0x2D6,
	ANIMATION_ACTION_EXIT_REAR_DRIVER = 0x2D7,
	ANIMATION_ACTION_EXIT_PASS_1 = 0x2D8,
	ANIMATION_ACTION_EXIT_PASS_2 = 0x2D9,
	ANIMATION_ACTION_EXIT_PASS_3 = 0x2DA,
	ANIMATION_ACTION_EXIT_PASS_4 = 0x2DB,
	ANIMATION_ACTION_EXIT_PASS_5 = 0x2DC,
	ANIMATION_ACTION_EXIT_PASS_6 = 0x2DD,
	ANIMATION_ACTION_EXIT_PASS_7 = 0x2DE,
	ANIMATION_ACTION_DIVE_DRIVER = 0x2DF,
	ANIMATION_ACTION_DIVE_PASS = 0x2E0,
	ANIMATION_ACTION_EXIT_MAIN = 0x2E1,
	ANIMATION_ACTION_EXIT_DRIVER_QUICK = 0x2E2,
	ANIMATION_ACTION_EXIT_DRIVER_QUICK_REVERSE = 0x2E3,
	ANIMATION_ACTION_EXIT_DRIVER_DR_SIDE = 0x2E4,
	ANIMATION_ACTION_EXIT_DRIVER_PS_SIDE = 0x2E5,
	ANIMATION_ACTION_EXIT_PASS_1_QUICK = 0x2E6,
	ANIMATION_ACTION_EXIT_PASS_1_QUICK_REVERSE = 0x2E7,
	ANIMATION_ACTION_EXIT_PASS_1_DIVE = 0x2E8,
	ANIMATION_ACTION_EXIT_PASS_1_DR_SIDE = 0x2E9,
	ANIMATION_ACTION_EXIT_PASS_1_PS_SIDE = 0x2EA,
	ANIMATION_ACTION_EXIT_PASS_2_QUICK = 0x2EB,
	ANIMATION_ACTION_EXIT_PASS_2_QUICK_REVERSE = 0x2EC,
	ANIMATION_ACTION_EXIT_PASS_2_DIVE = 0x2ED,
	ANIMATION_ACTION_EXIT_PASS_3_QUICK = 0x2EE,
	ANIMATION_ACTION_EXIT_PASS_3_QUICK_REVERSE = 0x2EF,
	ANIMATION_ACTION_EXIT_PASS_3_DIVE = 0x2F0,
	ANIMATION_ACTION_EXIT_FLIP = 0x2F1,
	ANIMATION_ACTION_PULLED_OUT_DRIVER_NORMAL = 0x2F2,
	ANIMATION_ACTION_PULLED_OUT_DRIVER_BASH = 0x2F3,
	ANIMATION_ACTION_PULLED_OUT_DRIVER_PUNCH = 0x2F4,
	ANIMATION_ACTION_PULLED_OUT_REAR_DRIVER_NORMAL = 0x2F5,
	ANIMATION_ACTION_PULLED_OUT_REAR_DRIVER_BASH = 0x2F6,
	ANIMATION_ACTION_PULLED_OUT_REAR_DRIVER_PUNCH = 0x2F7,
	ANIMATION_ACTION_PULLED_OUT_PASS_NORMAL = 0x2F8,
	ANIMATION_ACTION_PULLED_OUT_PASS_BASH = 0x2F9,
	ANIMATION_ACTION_PULLED_OUT_PASS_PUNCH = 0x2FA,
	ANIMATION_ACTION_ENTER_PRIMARY_1 = 0x2FB,
	ANIMATION_ACTION_ENTER_PRIMARY_2 = 0x2FC,
	ANIMATION_ACTION_ENTER_PRIMARY_3 = 0x2FD,
	ANIMATION_ACTION_ENTER_SECONDARY_1 = 0x2FE,
	ANIMATION_ACTION_ENTER_SECONDARY_2 = 0x2FF,
	ANIMATION_ACTION_ENTER_SECONDARY_3 = 0x300,
	ANIMATION_ACTION_ENTER_TERTIARY_1 = 0x301,
	ANIMATION_ACTION_ENTER_TERTIARY_2 = 0x302,
	ANIMATION_ACTION_ENTER_TERTIARY_3 = 0x303,
	ANIMATION_ACTION_ENTER_PASS_1 = 0x304,
	ANIMATION_ACTION_ENTER_PASS_2 = 0x305,
	ANIMATION_ACTION_ENTER_PASS_3 = 0x306,
	ANIMATION_ACTION_ENTER_PASS_4 = 0x307,
	ANIMATION_ACTION_ENTER_PASS_5 = 0x308,
	ANIMATION_ACTION_ENTER_PASS_6 = 0x309,
	ANIMATION_ACTION_ENTER_PASS_7 = 0x30A,
	ANIMATION_ACTION_PULLOUT_DRIVER_NORMAL = 0x30B,
	ANIMATION_ACTION_PULLOUT_DRIVER_BASH = 0x30C,
	ANIMATION_ACTION_PULLOUT_DRIVER_PUNCH = 0x30D,
	ANIMATION_ACTION_PULLOUT_REAR_DRIVER_NORMAL = 0x30E,
	ANIMATION_ACTION_PULLOUT_REAR_DRIVER_BASH = 0x30F,
	ANIMATION_ACTION_PULLOUT_REAR_DRIVER_PUNCH = 0x310,
	ANIMATION_ACTION_PULLOUT_PASS_NORMAL = 0x311,
	ANIMATION_ACTION_PULLOUT_PASS_BASH = 0x312,
	ANIMATION_ACTION_PULLOUT_PASS_PUNCH = 0x313,
	ANIMATION_ACTION_SLIDE_DRIVER_TO_PASS = 0x314,
	ANIMATION_ACTION_SLIDE_PASS_TO_DRIVER = 0x315,
	ANIMATION_ACTION_WALKER_MOUNT = 0x316,
	ANIMATION_ACTION_LADDER_ENTER_A = 0x317,
	ANIMATION_ACTION_LADDER_ENTER_B = 0x318,
	ANIMATION_ACTION_LADDER_ENTER_C = 0x319,
	ANIMATION_ACTION_LADDER_ENTER_TOP = 0x31A,
	ANIMATION_ACTION_LADDER_AIR_GRAB_FRONT = 0x31B,
	ANIMATION_ACTION_LADDER_AIR_GRAB_LEFT = 0x31C,
	ANIMATION_ACTION_LADDER_AIR_GRAB_RIGHT = 0x31D,
	ANIMATION_ACTION_LADDER_AIR_GRAB_FRONT_LEFT = 0x31E,
	ANIMATION_ACTION_LADDER_AIR_GRAB_FRONT_RIGHT = 0x31F,
	ANIMATION_ACTION_LADDER_EXIT_BOTTOM = 0x320,
	ANIMATION_ACTION_LADDER_EXIT_TOP_LEFT = 0x321,
	ANIMATION_ACTION_LADDER_EXIT_TOP_RIGHT = 0x322,
	ANIMATION_ACTION_LADDER_CLIMB_LEFT = 0x323,
	ANIMATION_ACTION_LADDER_CLIMB_RIGHT = 0x324,
	ANIMATION_ACTION_LADDER_SLIDE_STOP = 0x325,
	ANIMATION_ACTION_LADDER_SLIDE_START_LEFT = 0x326,
	ANIMATION_ACTION_LADDER_SLIDE_START_RIGHT = 0x327,
	ANIMATION_ACTION_LADDER_JUMP_LEFT = 0x328,
	ANIMATION_ACTION_LADDER_JUMP_RIGHT = 0x329,
	ANIMATION_ACTION_FINE_AIM_IN = 0x32A,
	ANIMATION_ACTION_FINE_AIM_OUT = 0x32B,
	ANIMATION_ACTION_FINE_AIM_FIRE = 0x32C,
	ANIMATION_ACTION_FINE_AIM_FIRE_BACK = 0x32D,
	ANIMATION_ACTION_FINE_AIM_FIRE_LEFT = 0x32E,
	ANIMATION_ACTION_FINE_AIM_FIRE_RIGHT = 0x32F,
	ANIMATION_ACTION_FINE_AIM_CROUCH_FIRE = 0x330,
	ANIMATION_ACTION_FINE_AIM_CROUCH_FIRE_BACK = 0x331,
	ANIMATION_ACTION_FINE_AIM_CROUCH_FIRE_LEFT = 0x332,
	ANIMATION_ACTION_FINE_AIM_CROUCH_FIRE_RIGHT = 0x333,
	ANIMATION_ACTION_STAND_PEEING = 0x334,
	ANIMATION_ACTION_STAND_USE_COMPUTER = 0x335,
	ANIMATION_ACTION_STAND_SCAN_HORIZON = 0x336,
	ANIMATION_ACTION_STAND_TO_LEAN = 0x337,
	ANIMATION_ACTION_LEAN_TO_STAND = 0x338,
	AMIMATION_ACTION_OPEN_MEDICAL_SUPPLIES = 0x339,
	ANIMATION_ACTION_OPEN_FILE_CABINET = 0x33A,
	ANIMATION_ACTION_JACKHAMMER_USE = 0x33B,
	ANIMATION_ACTION_JACKHAMMER_EXIT = 0x33C,
	ANIMATION_ACTION_STAND_WEAPON_IDLE = 0x33D,
	ANIMATION_ACTION_STAND_WEAPON_IDLE_A = 0x33E,
	ANIMATION_ACTION_COUGH = 0x33F,
	ANIMATION_ACTION_RADIO_CHECK_IN = 0x340,
	ANIMATION_ACTION_RADIO_ENTER = 0x341,
	ANIMATION_ACTION_SALUTE = 0x342,
	ANIMATION_ACTION_CHEER_A = 0x343,
	ANIMATION_ACTION_OPEN_AMMO_BOX = 0x344,
	ANIMATION_ACTION_OPEN_WEAPON_LOCKER = 0x345,
	ANIMATION_ACTION_CLOSE_WEAPON_LOCKER = 0x346,
	ANIMATION_ACTION_FREE_PRISONER = 0x347,
	ANIMATION_ACTION_FREE_PRISONER_MISSION = 0x348,
	ANIMATION_ACTION_KNEEL_TO_STAND_HANDS_TIED = 0x349,
	ANIMATION_ACTION_STAND_FREE_HANDS = 0x34A,
	ANIMATION_ACTION_GREET_DISMISS = 0x34B,
	ANIMATION_ACTION_GREET_DISMISS_LEFT = 0x34C,
	ANIMATION_ACTION_GREET_DISMISS_RIGHT = 0x34D,
	ANIMATION_ACTION_CHECK_WATCH = 0x34E,
	ANIMATION_ACTION_PARANOID_GLANCE = 0x34F,
	ANIMATION_ACTION_SCRATCH_HEAD = 0x350,
	ANIMATION_ACTION_STAND_WEIGHT_SHIFT = 0x351,
	ANIMATION_ACTION_FLYER_TAKEOFF = 0x352,
	ANIMATION_ACTION_FLYER_LAND = 0x353,
	ANIMATION_ACTION_SABOTAGE_FLYER = 0x354,
	ANIMATION_ACTION_DANS_DEATH = 0x355,
	ANIMATION_ACTION_SIT_TO_STAND_BENCH = 0x356,
	ANIMATION_ACTION_SIT_TO_STAND_BENCH_TIRED = 0x357,
	ANIMATION_ACTION_SIT_TO_STAND_BENCH_READ = 0x358,
	ANIMATION_ACTION_SIT_TO_STAND_BENCH_FAST = 0x359,
	ANIMATION_ACTION_STAND_TO_SIT_ANGRY = 0x35A,
	ANIMATION_ACTION_STAND_TO_SIT_BENCH = 0x35B,
	ANIMATION_ACTION_STAND_TO_SIT_BENCH_TIRED = 0x35C,
	ANIMATION_ACTION_STAND_TO_SIT_BENCH_READ = 0x35D,
	ANIMATION_ACTION_STAND_B_IDLE = 0x35E,
	ANIMATION_ACTION_PICKUP_BEAM = 0x35F,
	ANIMATION_ACTION_DROP_BEAM = 0x360,
	ANIMATION_ACTION_DROP_BEAM_QUICK = 0x361,
	ANIMATION_ACTION_BEER_DROP = 0x362,
	ANIMATION_ACTION_BAR_CLEAN_ENTER_A = 0x363,
	ANIMATION_ACTION_BAR_CLEAN_EXIT_A = 0x364,
	ANIMATION_ACTION_BEER_SIT_DRINK = 0x365,
	ANIMATION_ACTION_BEER_STAND_DRINK = 0x366,
	ANIMATION_ACTION_BAR_LEAN_TALK = 0x367,
	ANIMATION_ACTION_BEER_TO_STAND = 0x368,
	ANIMATION_ACTION_TALK_SHORT = 0x369,
	ANIMATION_ACTION_TALK_LONG = 0x36A,
	ANIMATION_ACTION_BEER_TALK = 0x36B,
	ANIMATION_ACTION_MINING_GROUND_ENTER = 0x36C,
	ANIMATION_ACTION_MINING_GROUND_EXIT = 0x36D,
	ANIMATION_ACTION_CLIPBOARD_POINT = 0x36E,
	ANIMATION_ACTION_CLIPBOARD_READ = 0x36F,
	ANIMATION_ACTION_STOREKEEPER_SELL = 0x370,
	ANIMATION_ACTION_STOREKEEPER_THINK = 0x371,
	ANIMATION_ACTION_ROCK_PICKUP = 0x372,
	ANIMATION_ACTION_ROCK_TOSS = 0x373,
	ANIMATION_ACTION_ROCK_QUICK_DROP = 0x374,
	ANIMATION_ACTION_XRAY_STAND_LOOK = 0x375,
	ANIMATION_ACTION_READ_SIGN = 0x376,
	ANIMATION_ACTION_AMBIENT_STAND_TO_CROUCH = 0x377,
	ANIMATION_ACTION_AMBIENT_CROUCH_TO_STAND = 0x378,
	ANIMATION_ACTION_GIVE = 0x379,
	ANIMATION_ACTION_SPRAY = 0x37A,
	ANIMATION_ACTION_CROUCH_SURVEY = 0x37B,
	ANIMATION_ACTION_STAND_SURVEY = 0x37C,
	ANIMATION_ACTION_CAR_INSPECT = 0x37D,
	ANIMATION_ACTION_BRIEFCASE_COMPUTER_USE = 0x37E,
	ANIMATION_ACTION_CLUTTER_LABDESK = 0x37F,
	ANIMATION_ACTION_CROTCH_ADJUST = 0x380,
	ANIMATION_ACTION_TO_SIT_BENCHTABLE = 0x381,
	ANIMATION_ACTION_TO_SIT_BENCHTABLE_B = 0x382,
	ANIMATION_ACTION_TO_STAND_BENCHTABLE = 0x383,
	ANIMATION_ACTION_TO_STAND_BENCHTABLE_B = 0x384,
	ANIMATION_ACTION_SHOPPER_BROWSE = 0x385,
	ANIMATION_ACTION_SHOPPER_BROWSE_BAG = 0x386,
	ANIMATION_ACTION_SHOPPER_CHECK_OUT = 0x387,
	ANIMATION_ACTION_OPEN_LOCKER = 0x388,
	ANIMATION_ACTION_CLOSE_LOCKER = 0x389,
	ANIMATION_ACTION_GIVE_PISTOL = 0x38A,
	ANIMATION_ACTION_BOX_DROP = 0x38B,
	ANIMATION_ACTION_BOX_PICK_UP = 0x38C,
	ANIMATION_ACTION_LAY_IN_BED = 0x38D,
	ANIMATION_ACTION_STAND_FROM_BED = 0x38E,
	ANIMATION_ACTION_MINING_ENTER = 0x38F,
	ANIMATION_ACTION_MINING_EXIT = 0x390,
	ANIMATION_ACTION_BINOCULAR_ENTER = 0x391,
	ANIMATION_ACTION_BINOCULAR_EXIT = 0x392,
	ANIMATION_ACTION_GARDEN_TO_SIT = 0x393,
	ANIMATION_ACTION_GARDEN_TO_STAND = 0x394,
	ANIMATION_ACTION_HAMMER_ENTER = 0x395,
	ANIMATION_ACTION_LEAN_ENTER = 0x396,
	ANIMATION_ACTION_LEAN_ENTER_B = 0x397,
	ANIMATION_ACTION_STEPS_TO_SIT = 0x398,
	ANIMATION_ACTION_STEPS_TO_STAND = 0x399,
	ANIMATION_ACTION_SURFACE_KNOCK = 0x39A,
	ANIMATION_ACTION_WELD_ENTER = 0x39B,
	ANIMATION_ACTION_WELD_EXIT = 0x39C,
	ANIMATION_ACTION_WELD_USE = 0x39D,
	ANIMATION_ACTION_WELD_INSPECT = 0x39E,
	ANIMATION_ACTION_CROUCH_WELD_ENTER = 0x39F,
	ANIMATION_ACTION_CROUCH_WELD_EXIT = 0x3A0,
	ANIMATION_ACTION_CROUCH_WELD_USE = 0x3A1,
	ANIMATION_ACTION_CROUCH_WELD_INSPECT = 0x3A2,
	ANIMATION_ACTION_READ_METER = 0x3A3,
	ANIMATION_ACTION_READ_PIPE = 0x3A4,
	ANIMATION_ACTION_SECURITY_PANEL = 0x3A5,
	ANIMATION_ACTION_SECURITY_PANEL_A = 0x3A6,
	ANIMATION_ACTION_SECURITY_PANEL_HIGH = 0x3A7,
	ANIMATION_ACTION_SWEEP_ENTER = 0x3A8,
	ANIMATION_ACTION_SWEEP_EXIT = 0x3A9,
	ANIMATION_ACTION_SWEEP = 0x3AA,
	ANIMATION_ACTION_TOOLBOX_ENTER = 0x3AB,
	ANIMATION_ACTION_TOOLBOX_EXIT = 0x3AC,
	ANIMATION_ACTION_TOOLBOX_INSPECT = 0x3AD,
	ANIMATION_ACTION_SMOKE = 0x3AE,
	ANIMATION_ACTION_SMOKE_A = 0x3AF,
	ANIMATION_ACTION_SMOKE_B = 0x3B0,
	ANIMATION_ACTION_TIE_SHOE = 0x3B1,
	ANIMATION_ACTION_EXECUTE_FIRE = 0x3B2,
	ANIMATION_ACTION_COWER_DEATH = 0x3B3,
	AMIMATION_ACTION_COWER_TURN = 0x3B4,
	ANIMATION_ACTION_TAKE = 0x3B5,
	ANIMATION_ACTION_KNEEL_EXIT = 0x3B6,
	ANIMATION_ACTION_KNEEL_EXIT_A = 0x3B7,
	ANIMATION_ACTION_WORK_A = 0x3B8,
	ANIMATION_ACTION_WORK_B = 0x3B9,
	ANIMATION_ACTION_WORK_C = 0x3BA,
	ANIMATION_ACTION_INJURED_CROUCH = 0x3BB,
	ANIMATION_ACTION_INJURED_TO_STAND = 0x3BC,
	ANIMATION_ACTION_CLTR_EXC_ENTER = 0x3BD,
	ANIMATION_ACTION_CLTR_EXC_EXIT = 0x3BE,
	ANIMATION_ACTION_SAM_STAND_IDLE = 0x3BF,
	ANIMATION_ACTION_SAM_STAND_IDLE_A = 0x3C0,
	ANIMATION_ACTION_SAM_STAND_IDLE_B = 0x3C1,
	ANIMATION_ACTION_SAM_STAND_IDLE_C = 0x3C2,
	ANIMATION_ACTION_SAM_INSPECT_WEAPON = 0x3C3,
	ANIMATION_ACTION_SAM_INSPECT_ARC = 0x3C4,
	ANIMATION_ACTION_SAM_WELD_START = 0x3C5,
	ANIMATION_ACTION_SAM_WELD_END = 0x3C6,
	ANIMATION_ACTION_SAM_WELD_USE = 0x3C7,
	ANIMATION_ACTION_SAM_WELD_INSPECT = 0x3C8,
	ANIMATION_ACTION_SAM_PISTOL_POINT = 0x3C9,
	ANIMATION_ACTION_SAM_STAND_POINT = 0x3CA,
	ANIMATION_ACTION_RFC_IDLE_A = 0x3CB,
	ANIMATION_ACTION_RFC_IDLE_B = 0x3CC,
	ANIMATION_ACTION_OLD_COOT_TALK = 0x3CD,
	ANIMATION_ACTION_OLD_COOT_TALK_YES = 0x3CE,
	ANIMATION_ACTION_OLD_COOT_TALK_NO = 0x3CF,
	ANIMATION_ACTION_OLD_COOT_FLINCH = 0x3D0,
	ANIMATION_ACTION_OLD_COOT_FLINCH_RIGHT = 0x3D1,
	ANIMATION_ACTION_OLD_COOT_FLINCH_LEFT = 0x3D2,
	ANIMATION_ACTION_FACIAL_COVER = 0x3D3,
	ANIMATION_ACTION_FACIAL_FLINCH = 0x3D4,
	ANIMATION_ACTION_FACIAL_FIRE = 0x3D5,
	ANIMATION_ACTION_FACIAL_BLIND_FIRE = 0x3D6,
	ANIMATION_ACTION_DONT_USE = 0x3D7,
	NUM_ANIM_ACTIONS = 0x295,
};

enum HumanMoveSubmodes
{
	HMSM_NONE = 0x0,
	HMSM_JUMP_START = 0x1,
	HMSM_JUMP_PRE = 0x2,
	HMSM_JUMP_MID = 0x3,
	HMSM_FALL_START = 0x4,
	HMSM_FALL_NORMAL = 0x5,
	HMSM_FALL_WORRY = 0x6,
	HMSM_FALL_PANIC = 0x7,
	HMSM_FALL_FREE = 0x8,
	HMSM_LAND = 0x9,
	HMSM_KNOCKDOWN_RAGDOLL = 0xA,
	HMSM_KNOCKDOWN_GETUP = 0xB,
	HMSM_KNOCKDOWN_TELEPORT = 0xC,
	HMSM_PTV_PATHFINDING = 0xD,
	HMSM_PTV_PAUSED = 0xE,
	HMSM_PTV_FINAL_ADJUSTMENT = 0xF,
	HMSM_COVER_RIGHT = 0x10,
	HMSM_COVER_RIGHT_EDGE = 0x11,
	HMSM_COVER_LEFT = 0x12,
	HMSM_COVER_LEFT_EDGE = 0x13,
	HMSM_COVER_RIGHT_LEAN = 0x14,
	HMSM_COVER_LEFT_LEAN = 0x15,
	HMSM_COVER_RIGHT_LEANUP = 0x16,
	HMSM_COVER_LEFT_LEANUP = 0x17,
	HMSM_COVER_RIGHT_BLINDFIRE = 0x18,
	HMSM_COVER_LEFT_BLINDFIRE = 0x19,
	HMSM_COVER_RIGHT_BLINDFIRE2 = 0x1A,
	HMSM_COVER_LEFT_BLINDFIRE2 = 0x1B,
	NUM_HUMAN_MOVE_SUBMODES = 0x1C,
};

/* 608 */
enum MultiGameplayMode
{
	MGPM_NONE = 0xFFFFFFFF,
	MGPM_DEATHMATCH = 0x0,
	MGPM_TEAM_DEATHMATCH = 0x1,
	MGPM_CAPTURE_THE_FLAG = 0x2,
	MGPM_SIEGE = 0x3,
	MGPM_KING_OF_THE_HILL = 0x4,
	MGPM_BAGMAN = 0x5,
	MGPM_TEAM_BAGMAN = 0x6,
	MGPM_DEMOLITION = 0x7,
	MGPM_NUM_MODES = 0x8,
};

/* 610 */
enum HumanCodeMorphTargets
{
	CODE_MORPH_EYELID_L = 0x0,
	CODE_MORPH_EYELID_R = 0x1,
	CODE_MORPH_MOUTH_1 = 0x2,
	CODE_MORPH_MOUTH_2 = 0x3,
	CODE_MORPH_EMOTION = 0x4,
	MAX_HUMAN_CODE_MORPHS = 0x5,
};

/* 605 */
enum HumanMovementStates
{
	HMS_CURRENT = 0xFFFFFFFF,
	HMS_IDLE = 0x0,
	HMS_WALK = 0x1,
	HMS_RUN = 0x2,
	HMS_SPRINT = 0x3,
	NUM_HUMAN_MOVEMENT_STATES = 0x4,
};

/* 596 */
enum VoiceLinePriorities
{
	VOICE_LINE_PRIORITY_NONE = 0x0,
	VOICE_LINE_PRIORITY_VERY_LOW = 0x1,
	VOICE_LINE_PRIORITY_LOW = 0x2,
	VOICE_LINE_PRIORITY_NORMAL = 0x3,
	VOICE_LINE_PRIORITY_HIGH = 0x4,
	VOICE_LINE_PRIORITY_VERY_HIGH = 0x5,
	VOICE_LINE_PRIORITY_CRITICAL = 0x9,
	VOICE_LINE_PRIORITY_FORCE_ALWAYS = 0xA,
	NUM_VOICE_LINE_PRIORITIES = 0xB,
	VOICE_LINE_PRIORITY_MIN_INTERRUPT_LEVEL = 0x9,
};

/* 597 */
enum IK_Type
{
	ANIMATION_IK_LEFT_HAND = 0x0,
	ANIMATION_IK_RIGHT_HAND = 0x1,
	ANIMATION_IK_LEFT_FOOT = 0x2,
	ANIMATION_IK_RIGHT_FOOT = 0x3,
	NUM_ANIMATION_IK_TYPES = 0x4,
};

enum object_type
{
	OT_UNDEFINED = 0xFFFFFFFF,
	OT_HUMAN = 0x0,
	OT_ITEM = 0x1,
	OT_MOVER = 0x2,
	OT_VEHICLE = 0x3,
	OT_EFFECT = 0x4,
	OT_DEBRIS = 0x5,
	OT_TURRET = 0x6,
	OT_LIGHT = 0x7,
	OT_PLAYER_START = 0x8,
	OT_COVER_NODE = 0x9,
	OT_NAVPOINT = 0xA,
	OT_SQUAD = 0xB,
	OT_CONVOY = 0xC,
	OT_CONVOY_END = 0xD,
	OT_PATROL = 0xE,
	OT_GUARD_NODE = 0xF,
	OT_SKYBOX = 0x10,
	OT_LADDER = 0x11,
	OT_CONSTRAINT = 0x12,
	OT_ZONE = 0x13,
	OT_TRIGGER_REGION = 0x14,
	OT_MARAUDER_AMBUSH_REGION = 0x15,
	OT_RESTRICTED_AREA = 0x16,
	OT_SPAWN_REGION = 0x17,
	OT_AMBIENT_SPAWN_REGION = 0x18,
	OT_VEHICLE_SPAWN_NODE = 0x19,
	OT_NPC_SPAWN_NODE = 0x1A,
	OT_TURRET_SPAWN_NODE = 0x1B,
	OT_ACTION_NODE = 0x1C,
	OT_SQUAD_SPAWN_NODE = 0x1D,
	OT_ROADBLOCK_NODE = 0x1E,
	OT_SHAPE_CUTTER = 0x1F,
	OT_DISTRICT = 0x20,
	OT_MULTI_MARKER = 0x21,
	OT_PATH_ROAD = 0x22,
	OT_LIGHT_PARAMS = 0x23,
	OT_DUMMY = 0x24,
	OT_ACTIVITY_SPAWN = 0x25,
	OT_RAID_NODE = 0x26,
	OT_SUBZONE = 0x27,
	OT_HOUSE_ARREST_NODE = 0x28,
	OT_DEMOLITIONS_MASTER_NODE = 0x29,
	OT_RIDING_SHOTGUN_NODE = 0x2A,
	OT_DELIVERY_NODE = 0x2B,
	OT_BOUNDING_BOX = 0x2C,
	OT_MISSION_START_NODE = 0x2D,
	OT_COURIER = 0x2E,
	OT_COURIER_END = 0x2F,
	OT_SAFEHOUSE = 0x30,
	OT_BFTP_NODE = 0x31,
	OT_AIR_STRIKE_DEFENSE_NODE = 0x32,
	OT_UPGRADE_NODE = 0x33,
	OT_AREA_DEFENSE_NODE = 0x34,
	NUM_OBJECT_TYPES = 0x35,
};

enum object_sub_type
{
    OT_SUB_UNDEFINED = 0xFFFFFFFF,
    OT_SUB_MOVER_GENERAL = 0x0,
    OT_SUB_MOVER_RFG = 0x1,
    OT_SUB_HUMAN_NPC = 0x2,
    OT_SUB_HUMAN_PLAYER = 0x3,
    OT_SUB_VEHICLE_AUTO = 0x4,
    OT_SUB_VEHICLE_FLYER = 0x5,
    OT_SUB_VEHICLE_WALKER = 0x6,
    OT_SUB_ITEM_WEAPON = 0x7,
    OT_SUB_ITEM_PROJECTILE = 0x8,
    OT_SUB_ITEM_MULTI_FLAG = 0x9,
    OT_SUB_ITEM_MULTI_BACKPACK = 0xA,
    NUM_OBJECT_SUB_TYPES = 0xB,
};

/* 675 */
enum LipsyncDataHandle
{
	INVALID_LIPSYNC_DATA_HANDLE = 0xFFFFFFFF,
	LIPSYNC_DATA_HANDLE_FORCE_TO_32_BIT = 0x7FFFFFFF,
};

/* 612 */
enum ConstraintType
{
	HAVOK_CONSTRAINT_NONE = 0xFFFFFFFF,
	HAVOK_CONSTRAINT_POINT = 0x0,
	HAVOK_CONSTRAINT_HINGE = 0x1,
	HAVOK_CONSTRAINT_PRISMATIC = 0x2,
	HAVOK_CONSTRAINT_RAGDOLL = 0x3,
	HAVOK_CONSTRAINT_MOTOR = 0x4,
	HAVOK_CONSTRAINT_FAKE = 0x5,
	NUM_HAVOK_CONSTRAINT_TYPES = 0x6,
};

/* 613 */
enum DamagedByTypes
{
	DBT_NONE = 0x0,
	DBT_CAR = 0x1,
	DBT_EXPLOSION = 0x2,
	DBT_BULLET = 0x3,
	DBT_LEVEL_OBJECT = 0x4,
	DBT_MELEE = 0x5,
	DBT_WORLD = 0x6,
	DBT_RADIATION = 0x7,
};

/* 735 */
enum ObjectHitLocation
{
	HIT_NONE = 0xFFFFFFFF,
	HIT_GENERAL = 0x0,
	HIT_TORSO = 0x1,
	HIT_PELVIS = 0x2,
	HIT_LEFT_ARM = 0x3,
	HIT_RIGHT_ARM = 0x4,
	HIT_HEAD = 0x5,
	HIT_LEFT_LEG = 0x6,
	HIT_RIGHT_LEG = 0x7,
	NUM_HIT_LOCATIONS = 0x8,
};

/* 725 */
enum HumanRotateDirection
{
	HUMAN_ROTATE_SHORTEST = 0x0,
	HUMAN_ROTATE_CLOCKWISE = 0x1,
	HUMAN_ROTATE_COUNTERCLOCKWISE = 0x2,
	HUMAN_ROTATE_USE_LIMITS = 0x3,
};

/* 726 */
enum BlockMovementTypes
{
	BLOCK_MOVEMENT_POS = 0x0,
	BLOCK_MOVEMENT_ORIENT = 0x1,
	BLOCK_MOVEMENT_POS_AND_ORIENT = 0x2,
};

/* 727 */
enum HumanStates
{
	HS_CURRENT = 0xFFFFFFFF,
	HS_STANDARD = 0x0,
	HS_JUMP = 0x1,
	HS_FALL = 0x2,
	HS_TURRET = 0x3,
	HS_DEAD = 0x4,
	HS_LADDER = 0x5,
	HS_PLAYER_PATHING = 0x6,
	HS_VEHICLE_ENTERING = 0x7,
	HS_VEHICLE_SITTING = 0x8,
	HS_VEHICLE_DRIVING = 0x9,
	HS_VEHICLE_EXITING = 0xA,
	HS_SPECTATOR = 0xB,
	HS_COVER = 0xC,
	HS_AMMO_BOX = 0xD,
	HS_MP_DEFUSE = 0xE,
	HS_ACTION_NODE = 0xF,
	HS_SATELLITE = 0x10,
	NUM_HUMAN_STATES = 0x11,
};

/* 728 */
enum HumanStances
{
	HST_CURRENT = 0xFFFFFFFF,
	HST_STAND = 0x0,
	HST_CROUCH = 0x1,
	HST_PRONE = 0x2,
	NUM_HUMAN_STANCES = 0x3,
};

/* 729 */
enum HumanMoveModes
{
	HMM_NONE = 0x0,
	HMM_DIRECT = 0x1,
	HMM_PATHFINDING = 0x2,
	HMM_PATHFINDING_TO_VEHICLE = 0x3,
	HMM_JUMP = 0x4,
	HMM_FALL = 0x5,
	HMM_FP_MOVE = 0x6,
	HMM_KNOCKDOWN = 0x7,
	HMM_SATELLITE = 0x8,
	NUM_HUMAN_MOVE_MODES = 0x9,
};

/* 730 */
enum FootPlant
{
	FP_LEFT_FOOT = 0x0,
	FP_RIGHT_FOOT = 0x1,
	FP_NEITHER_FOOT = 0x2,
	FP_BOTH_FEET = 0x3,
};

/* 731 */
enum VehicleSeatIndex
{
	VSI_BEST = 0xFFFFFFFE,
	VSI_INVALID = 0xFFFFFFFF,
	VSI_DRIVER = 0x0,
	VSI_PASSENGER_1 = 0x1,
	VSI_PASSENGER_2 = 0x2,
	VSI_PASSENGER_3 = 0x3,
	VSI_PASSENGER_4 = 0x4,
	VSI_PASSENGER_5 = 0x5,
	VSI_PASSENGER_6 = 0x6,
	VSI_PASSENGER_7 = 0x7,
	VSI_PASSENGER_8 = 0x8,
	VSI_PASSENGER_9 = 0x9,
	VSI_PASSENGER_10 = 0xA,
	NUM_VEHICLE_SEATS = 0xB,
};

/* 732 */
enum ObjectImportanceLevel
{
	OBJECT_IMPORTANCE_LEVEL_UNKNOWN = 0xFFFFFFFF,
	OBJECT_IMPORTANCE_LEVEL_NONE = 0x0,
	OBJECT_IMPORTANCE_LEVEL_LOW = 0x1,
	OBJECT_IMPORTANCE_LEVEL_MEDIUM = 0x2,
	OBJECT_IMPORTANCE_LEVEL_HIGH = 0x3,
	NUM_OBJECT_IMPORTANCE_LEVELS = 0x4,
};

/* 733 */
enum PlayVoiceStatus
{
	PLAY_VOICE_SUCCESS = 0x0,
	PLAY_VOICE_FAILURE_CHANCE = 0x1,
	PLAY_VOICE_FAILURE_MISSING = 0x2,
	PLAY_VOICE_FAILURE_MISSING_VARIATIONS = 0x3,
	PLAY_VOICE_FAILURE_NO_AVAILABLE_VARIATIONS = 0x4,
	PLAY_VOICE_FAILURE_NO_VALID_CUES = 0x5,
	PLAY_VOICE_FAILURE_AUDIOLIB = 0x6,
	PLAY_VOICE_FAILURE_LOCAL_COOLDOWN = 0x7,
	PLAY_VOICE_FAILURE_GLOBAL_COOLDOWN = 0x8,
	PLAY_VOICE_FAILURE_SIMULTANEOUS = 0x9,
	PLAY_VOICE_FAILURE_PRIORITY = 0xA,
	PLAY_VOICE_FAILURE_CALLBACK = 0xB,
	PLAY_VOICE_FAILURE_IN_VEHICLE = 0xC,
	PLAY_VOICE_FAILURE_ERROR = 0xD,
	NUM_PLAY_VOICE_STATUS = 0xE,
};

/* 734 */
enum VoiceLines
{
	VOICE_LINE_NONE = 0xFFFFFFFF,
	VOICE_LINE_HA_EDF_HOSTAGE_RESPONSE = 0x0,
	VOICE_LINE_HA_EDF_SPOT_PLAYER = 0x1,
	VOICE_LINE_HA_HOSTAGE_HELP = 0x2,
	VOICE_LINE_HA_HOSTAGE_HELP_PC = 0x3,
	VOICE_LINE_HA_HOSTAGE_FREED = 0x4,
	VOICE_LINE_HA_HOSTAGE_CHAT = 0x5,
	VOICE_LINE_HA_HOSTAGE_VEH_CHAT = 0x6,
	VOICE_LINE_HA_HOSTAGE_VEH_COMPLAINT = 0x7,
	VOICE_LINE_HA_HOSTAGE_THANK = 0x8,
	VOICE_LINE_RAID_FALL_BACK = 0x9,
	VOICE_LINE_RAID_FALL_BACK_RESPONSE = 0xA,
	VOICE_LINE_RAID_PUSH_FORWARD = 0xB,
	VOICE_LINE_RAID_PUSH_FORWARD_RESPONSE = 0xC,
	VOICE_LINE_RAID_OFFENSE_PLAYER_ARRIVES = 0xD,
	VOICE_LINE_RAID_DEFENSE_PLAYER_ARRIVES = 0xE,
	VOICE_LINE_RAID_PREPARE = 0xF,
	VOICE_LINE_RAID_PLAYER_LEAVES = 0x10,
	VOICE_LINE_RAID_REACT_EDF_REINFORCEMENTS = 0x11,
	VOICE_LINE_RAID_REACT_GUERILLA_REINFORCEMENTS = 0x12,
	VOICE_LINE_RAID_OFFENSE_WIN = 0x13,
	VOICE_LINE_RAID_DEFENSE_WIN = 0x14,
	VOICE_LINE_RAID_WIN_CHEER = 0x15,
	VOICE_LINE_VEHICLE_ATTACKED = 0x16,
	VOICE_LINE_VEHICLE_IMPACTS_VEHICLE = 0x17,
	VOICE_LINE_VEHICLE_DODGE_FRIENDLY = 0x18,
	VOICE_LINE_VEHICLE_DODGE_UNFRIENDLY = 0x19,
	VOICE_LINE_VEHICLE_SACRIFICE = 0x1A,
	VOICE_LINE_VEHICLE_SACRIFICE_RELUCTANT = 0x1B,
	VOICE_LINE_VEHICLE_STUCK = 0x1C,
	VOICE_LINE_CIVILIAN_COWER_EDF = 0x1D,
	VOICE_LINE_CIVILIAN_FLEE_EDF = 0x1E,
	VOICE_LINE_CIVILIAN_SPOT_EDF_AND_LEAVE = 0x1F,
	VOICE_LINE_PATROL_CHECK_IN = 0x20,
	VOICE_LINE_PATROL_BEAT_CIVILIAN = 0x21,
	VOICE_LINE_PATROL_BEAT_CIVILIAN_SUBMISSIVE_RESPONSE = 0x22,
	VOICE_LINE_PATROL_BEAT_CIVILIAN_EDF_RESPONSE = 0x23,
	VOICE_LINE_PATROL_REQUEST_MOVE = 0x24,
	VOICE_LINE_PATROL_REQUEST_MOVE_CIVILIAN_DEFIANT_RESPONSE = 0x25,
	VOICE_LINE_PATROL_REQUEST_MOVE_CIVILIAN_SUBMISSIVE_RESPONSE = 0x26,
	VOICE_LINE_PATROL_STOMP_CIVILIAN = 0x27,
	VOICE_LINE_PATROL_TAUNT_CIVILIAN = 0x28,
	VOICE_LINE_PATROL_TAUNT_CIVILIAN_DEFIANT_RESPONSE = 0x29,
	VOICE_LINE_AMBIENT_PLAYER_DONT_FOLLOW_ME = 0x2A,
	VOICE_LINE_AMBIENT_TALK_TO_SELF_LOW_MORALE = 0x2B,
	VOICE_LINE_AMBIENT_TALK_TO_SELF_MEDIUM_MORALE = 0x2C,
	VOICE_LINE_AMBIENT_TALK_TO_SELF_HIGH_MORALE = 0x2D,
	VOICE_LINE_AMBIENT_PLAYER_GREET_LOW_MORALE = 0x2E,
	VOICE_LINE_AMBIENT_PLAYER_GREET_MEDIUM_MORALE = 0x2F,
	VOICE_LINE_AMBIENT_PLAYER_GREET_HIGH_MORALE = 0x30,
	VOICE_LINE_AMBIENT_PLAYER_GREET_LOW_MORALE_FAMOUS = 0x31,
	VOICE_LINE_AMBIENT_PLAYER_GREET_MEDIUM_MORALE_FAMOUS = 0x32,
	VOICE_LINE_AMBIENT_PLAYER_GREET_HIGH_MORALE_FAMOUS = 0x33,
	VOICE_LINE_HONKED_AT_RESIST = 0x34,
	VOICE_LINE_HONKED_AT_MOVE = 0x35,
	VOICE_LINE_AMBIENT_THREATEN = 0x36,
	VOICE_LINE_REACT_ALLY_CORPSE_GROUP = 0x37,
	VOICE_LINE_REACT_CHARGE_GROUP = 0x38,
	VOICE_LINE_REACT_DISTURBANCE_GROUP = 0x39,
	VOICE_LINE_COMBAT_ALLY_FLEE = 0x3A,
	VOICE_LINE_COMBAT_ALLY_JOIN = 0x3B,
	VOICE_LINE_COMBAT_CONGRATULATE_ON_KILL = 0x3C,
	VOICE_LINE_COMBAT_ALLY_KILLED = 0x3D,
	VOICE_LINE_COMBAT_FRIENDLY_FIRE_ASSAILANT = 0x3E,
	VOICE_LINE_COMBAT_FRIENDLY_FIRE_OBSERVED = 0x3F,
	VOICE_LINE_COMBAT_FRIENDLY_FIRE_VICTIM = 0x40,
	VOICE_LINE_COMBAT_FRIENDLY_FIRE_VIP_COMPLAIN = 0x41,
	VOICE_LINE_COMBAT_BOOST_TEAM_MORALE = 0x42,
	VOICE_LINE_COMBAT_FLEE_COLLAPSING_BUILDING = 0x43,
	VOICE_LINE_COMBAT_VEHICLE_ABOUT_TO_BLOW = 0x44,
	VOICE_LINE_COMBAT_TAUNT_ENEMY = 0x45,
	VOICE_LINE_COMBAT_TAUNT_ENEMY_VEHICLE = 0x46,
	VOICE_LINE_COMBAT_TAUNT_ENEMY_WALKER = 0x47,
	VOICE_LINE_COMBAT_TAUNT_ENEMY_TANK = 0x48,
	VOICE_LINE_COMBAT_TAUNT_EDF = 0x49,
	VOICE_LINE_COMBAT_TAUNT_GUERILLA = 0x4A,
	VOICE_LINE_COMBAT_TAUNT_MARAUDER = 0x4B,
	VOICE_LINE_COMBAT_SPOT_ENEMY_VEHICLE = 0x4C,
	VOICE_LINE_COMBAT_SPOT_MARAUDER_TO_ALLIES = 0x4D,
	VOICE_LINE_COMBAT_SPOT_EDF_TO_ALLIES = 0x4E,
	VOICE_LINE_COMBAT_FLEE_ENEMY_TANK = 0x4F,
	VOICE_LINE_COMBAT_FLEE_ENEMY_WALKER = 0x50,
	VOICE_LINE_COMBAT_REQUEST_COVER_ME = 0x51,
	VOICE_LINE_COMBAT_REQUEST_COVER_ME_RESPONSE_NO = 0x52,
	VOICE_LINE_COMBAT_REQUEST_COVER_ME_RESPONSE_YES = 0x53,
	VOICE_LINE_COMBAT_THROW_GRENADE_GROUP = 0x54,
	VOICE_LINE_COMBAT_SPOT_GRENADE_GROUP = 0x55,
	VOICE_LINE_COMBAT_SPOT_PROJECTILE_GROUP = 0x56,
	VOICE_LINE_SEARCH_INITIATE = 0x57,
	VOICE_LINE_SEARCH_INITIATE_RESPONSE = 0x58,
	VOICE_LINE_SEARCH_THREATEN_AREA = 0x59,
	VOICE_LINE_SEARCH_DISGRUNTLED = 0x5A,
	VOICE_LINE_SEARCH_SPOT_ENEMY = 0x5B,
	VOICE_LINE_CHECKPOINT_WAVE_THROUGH = 0x5C,
	VOICE_LINE_RESTRICTED_SPOT = 0x5D,
	VOICE_LINE_RESTRICTED_FIRST_WARNING = 0x5E,
	VOICE_LINE_RESTRICTED_WARNING_SHOT = 0x5F,
	VOICE_LINE_RESTRICTED_INITIATE_BEATDOWN = 0x60,
	VOICE_LINE_RESTRICTED_TARGET_HOSTILE = 0x61,
	VOICE_LINE_RESTRICTED_TAUNT = 0x62,
	VOICE_LINE_DEMAND_CIV_ID = 0x63,
	VOICE_LINE_CIV_ID_CLEAN = 0x64,
	VOICE_LINE_CIV_ID_UNCLEAN = 0x65,
	VOICE_LINE_EXECUTE_SETUP = 0x66,
	VOICE_LINE_EXECUTE = 0x67,
	VOICE_LINE_REACT_TO_PLAYER_WEAPON = 0x68,
	VOICE_LINE_REACT_TO_PLAYER_JETPACK = 0x69,
	VOICE_LINE_UPGRADE_GENERIC = 0x6A,
	VOICE_LINE_UPGRADE_DETECTOR = 0x6B,
	VOICE_LINE_UPGRADE_GRINDER = 0x6C,
	VOICE_LINE_UPGRADE_JETPACK = 0x6D,
	VOICE_LINE_UPGRADE_PROXIMITY = 0x6E,
	VOICE_LINE_UPGRADE_RPG = 0x6F,
	VOICE_LINE_UPGRADE_SHIELDING = 0x70,
	VOICE_LINE_UPGRADE_THERMOBERIC = 0x71,
	VOICE_LINE_UPGRADE_WELDER = 0x72,
	VOICE_LINE_BATTLE_CRY = 0x73,
	VOICE_LINE_PAIN_BLUNT = 0x74,
	VOICE_LINE_BOMB = 0x75,
	VOICE_LINE_CHEER = 0x76,
	VOICE_LINE_COUGH = 0x77,
	VOICE_LINE_DEATH = 0x78,
	VOICE_LINE_DEATH_SCREAM = 0x79,
	VOICE_LINE_PAIN_ELECTRIC = 0x7A,
	VOICE_LINE_FLINCH = 0x7B,
	VOICE_LINE_PAIN_BULLET = 0x7C,
	VOICE_LINE_PANIC = 0x7D,
	VOICE_LINE_THROWN = 0x7E,
	VOICE_LINE_EDF_VEHICLE_CHASE = 0x7F,
	VOICE_LINE_MARAUDER_AMBUSH = 0x80,
	NUM_VOICE_LINES = 0x81,
};

enum rl_camera_type
{
	RLCT_PERSPECTIVE = 0x0,
	RLCT_ORTHO = 0x1,
	NUM_RL_CAMERA_TYPES = 0x2,
};

enum rl_camera_motion_blur_type
{
	MOTION_BLUR_TYPE_RADIAL = 0x0,
	MOTION_BLUR_TYPE_CAMERA = 0x1,
};

enum control_axis_action
{
	CAA_AXIS_INVALID = 0xFFFFFFFF,
	CAA_CAMERA_ROTATE = 0x0,
	CAA_CAMERA_ELEVATE = 0x1,
	CAA_WALK_TURN_LEFT_RIGHT = 0x2,
	CAA_WALK_FORWARD_BACKWARD = 0x3,
	CAA_TANK_STEER = 0x4,
	CAA_TANK_STEER_VERT = 0x5,
	CAA_TANK_CAMERA_ROTATE = 0x6,
	CAA_TANK_CAMERA_ELEVATE = 0x7,
	CAA_DRIVE_STEER = 0x8,
	CAA_DRIVE_STEER_VERT = 0x9,
	CAA_DRIVE_CAMERA_ROTATE = 0xA,
	CAA_DRIVE_CAMERA_ELEVATE = 0xB,
	CAA_ZOOM_IN_OUT = 0xC,
	CAA_CYCLE_WEAPONS = 0xD,
	CAA_STUB_1 = 0xE,
	CAA_STUB_2 = 0xF,
	CAA_STUB_3 = 0x10,
	CAA_STUB_4 = 0x11,
	CAA_STUB_5 = 0x12,
	CAA_STUB_6 = 0x13,
	CAA_STUB_7 = 0x14,
	CAA_SCROLL_BAR = 0x15,
	CAA_VDC_ACCELERATE_AXIS = 0x16,
	CAA_VDC_BRAKE_REVERSE_AXIS = 0x17,
	CAA_MAP_PAN_CAMERA_LEFT_RIGHT = 0x18,
	CAA_MAP_PAN_CAMERA_UP_DOWN = 0x19,
	NUM_CONTROL_AXIS_ACTIONS = 0x1A,
	RESERVED_NUM_CONTROL_AXIS_ACTIONS = 0x32,
};

enum camera_mode
{
	CAMERA_FREE_MODE = 0x0,
	CAMERA_SLEW_MODE = 0x1,
	CAMERA_CURSOR_MODE = 0x2,
	CAMERA_MINI_SCRIPT_MODE = 0x3,
	CAMERA_CUTSCENE_SCRIPT_MODE = 0x4,
	CAMERA_DUMB_MODE = 0x5,
	CAMERA_DEATH_MODE = 0x6,
	CAMERA_LOOKAROUND_MODE = 0x7,
	CAMERA_FIRST_PERSON_MODE = 0x8,
	CAMERA_TURRET_MODE = 0x9,
	CAMERA_THIRD_PERSON_MODE = 0xA,
	CAMERA_TEST_SUITE_MODE = 0xB,
	CAMERA_SATELLITE_MODE = 0xC,
	NUM_CAMERA_MODES = 0xD,
};

struct __declspec(align(8)) plane_info //32 (25 align(8) -> 32) //rl_frustum_base::plane_info
{
	vector4 m_plane; //16
	int m_neg_verts; //4
	int m_pos_verts; //4
	bool m_active; //1
};

struct __declspec(align(4)) frustum_cache //212 (209 align(4) -> 212) //rl_frustum_base::frustum_cache
{
	vector m_absPlanes[9]; //108
	int m_numValidCornerPoints; //4
	vector m_corners[8]; //96
	bool m_dirty; //1
};

struct rl_frustum_base //508
{
	int m_num_active_planes; //4
	int m_max_planes; //4
	__declspec(align(16)) plane_info m_planes[9]; //288
	frustum_cache m_cache; //212
};

struct rl_frustum : rl_frustum_base
{

};

struct __declspec(align(8)) rl_view_frustum : rl_frustum_base
{
	vector m_view_point;
};

struct cardinal_spline
{
	vector *pts;
	int num_pts;
	float tension;
};

struct keylist_vector
{
	unsigned __int16 num_keys;
	et_ptr_offset<vector, 0> key_positions;
	et_ptr_offset<float, 0> key_times;
};

struct keylist_float
{
	unsigned __int16 num_keys;
	et_ptr_offset<float, 0> key_vals;
	et_ptr_offset<float, 0> key_times;
};

struct short_quat
{
	__int16 x;
	__int16 y;
	__int16 z;
	__int16 w;
};

struct keylist_quat
{
	unsigned __int16 num_keys;
	et_ptr_offset<short_quat, 0> key_rotations;
	et_ptr_offset<float, 0> key_times;
};

struct c_cutscene_shot
{
	float start_time;
	float end_time;
	keylist_vector translation_keys;
	keylist_quat rotation_keys;
	keylist_float fov_keys;
	keylist_float blur_keys;
	keylist_float near_plane_keys;
	keylist_float focus_start_plane_keys;
	keylist_float focus_end_plane_keys;
	keylist_float far_plane_keys;
};

/*const*/ struct c_cutscene_camera
{
	unsigned __int16 csc_version;
	unsigned __int16 csc_num_shots;
	et_ptr_offset<c_cutscene_shot, 0> csc_shots;
};

struct cutscene_mode_params
{
	c_cutscene_camera *camera_script;
	int flags;
	vector base_pos;
	matrix base_orient;
};

struct mini_script_params
{
	int num_knots;
	float period_per_spline_unit;
	vector pos_knots[32];
	vector fvec_knots[32];
	vector rvec_knots[32];
	cardinal_spline pos_spline;
	cardinal_spline fvec_spline;
	cardinal_spline rvec_spline;
	float cur_time;
};

struct camera_swoop_params
{
	float swoop_in_speed;
	float in_handle_lengths[3];
	float out_handle_lengths[3];
	float in_handle_lengths_swing[3];
	float out_handle_lengths_swing[3];
	float behind_head_dist;
	float swing_factor_x;
	float swing_factor_z;
};

const struct camera_view_table_entry
{
	char *name;
	int change_view_time;
	int out_time_override;
	int target_focus_speed;
	int terrain_focus_speed;
	float fov_min;
	float fov_min_sp;
	float fov_max;
	float fov_zoom_percent;
	float focal_distance_min;
	float focal_distance_max;
	float focal_range_near;
	float focal_range_far;
	float focused_distance_normal;
	float focused_distance_zoom;
	float focused_dist_target_multiplier;
	float camera_distance;
	bool use_dof;
	bool use_weapon_fov;
	bool use_far_values;
	bool use_fov_zoom;
	bool override_weapon_zoom;
	bool override_weapon_max_range;
	unsigned int effect_handle;
};

/* 6252 */
struct camera_view_data
{
	float m_camera_distance;
	float m_focused_distance;
	float m_focal_distance;
	float m_focal_range_near;
	float m_focal_range_far;
	float m_fov;
	bool m_dof_enable;
	camera_view_table_entry *m_last_view;
	camera_view_table_entry *m_current_view;
	TimestampPercent m_transition_timestamp;
	TimestampPercent m_target_zoom_timestamp;
	Timestamp m_lost_target;
	unsigned int m_current_target;
	float m_temp_distance_override;
	float m_last_camera_distance;
	float m_target_camera_distance;
	float m_last_focal_distance;
	float m_target_focal_distance;
	float m_last_focused_distance;
	float m_target_focused_distance;
	float m_last_range_near;
	float m_target_range_near;
	float m_last_range_far;
	float m_target_range_far;
	float m_last_fov;
	float m_target_fov;
	float m_min_zoom;
	float m_max_zoom;
	float m_max_range;
	unsigned int m_effect_info_handle;
	unsigned int m_effect_handle;
};

enum Camera_free_control_types
{
	CAMERA_FREE_CONTROL_TYPE_NORMAL = 0x0,
	CAMERA_FREE_CONTROL_TYPE_PREDICTIVE = 0x1,
	CAMERA_FREE_CONTROL_TYPE_TREAD = 0x2,
	CAMERA_FREE_CONTROL_TYPE_TREAD_CAM_REL = 0x3,
	CAMERA_FREE_CONTROL_TYPE_COUNT = 0x4,
};

struct __declspec(align(4)) lookaround_mode_params
{
	float rot_p;
	float rot_h;
	float pitch;
	float pitch_base;
	float prev_pitch;
	float heading;
	float heading_base;
	float prev_heading;
	float rotvel_p;
	float rotvel_h;
	float rotvel_added_p;
	float rotvel_added_h;
	float rot_p_multiplier;
	float rot_h_multiplier;
	bool ragdoll_cam;
	float recoil_start_pitch;
	__int8 over_the_shoulder : 1;
	__int8 recoiling : 1;
};

struct  thirdperson_mode_params
{
	vector cur_offset;
	vector desired_offset;
	float interpolation_time;
	float ragdoll_offset;
};

struct free_submode_params
{
	float xz_dist;
	float y_dist;
	float lookat_offset_x;
	float lookat_offset_y;
	float lookat_offset_z;
	float lookat_offset_y_delta;
	float min_elev_angle_rad;
	float max_elev_angle_rad;
	float free_fov;
	camera_swoop_params fp_swoop_params;
	float base_pitch;
	float dist_from_lookat;
	float y_axis_rotation_speed;
	int vehicle_camera_selection;
};

struct free_mode_flags
{
	__int8 target_moved_last_frame : 1;
	__int8 suppress_target_lag : 1;
	__int8 swinging_to_dir : 1;
	__int8 elev_relaxing : 1;
	__int8 heading_is_bashed : 1;
	__int8 unresolvable_obstruction : 1;
	__int8 debug_mode : 1;
	__int8 look_back : 1;
	__int8 look_back_last : 1;
};

struct __declspec(align(4)) free_mode_params
{
	free_submode_params *submode_params;
	free_submode_params *cur_interior_params;
	free_submode_params *cur_exterior_params;
	free_submode_params *cur_vehicle_params;
	Camera_free_control_types control_type;
	vector last_lookat_pos;
	float suppressed_target_lag_pct;
	float user_rot;
	float auto_rot;
	float auto_rot_vel;
	float user_rot_vel;
	float user_elev;
	float last_elev_angle;
	float last_vehicle_pitch;
	float desired_elev_angle;
	float control_multiplier;
	float pitch_drift_vel;
	float heading_drift_vel;
	float camera_swing_rate;
	vector debug_offset;
	float swing_percent;
	float swing_time;
	float swing_start_heading;
	float swing_goal_heading;
	vector bash_heading_dir;
	vector bash_heading_start_dir;
	float bash_heading_percent;
	float bash_heading_time;
	float cur_dist_from_lookat;
	float goal_dist_from_lookat;
	float steering_angle;
	float last_gyro_heading_offset;
	float last_gyro_pitch_offset;
	vector last_gyro_offset;
	float last_mouse_heading_offset;
	float last_mouse_pitch_offset;
	vector last_mouse_offset;
	vector mouse_absolute_pos;
	control_axis_action last_h_action;
	control_axis_action last_v_action;
	free_mode_flags flags;
};

struct rfg_camera
{
	camera_mode mode;
	camera_mode mode_stack[8];
	int mode_stack_size;
	camera_mode level_mode;
	vector real_pos;
	vector ideal_pos;
	vector last_pos;
	matrix real_orient;
	matrix ideal_orient;
	matrix last_orient;
	float real_fov;
	float ideal_fov;
	float last_fov;
	unsigned int target_handle;
	vector last_target_pos;
	matrix last_target_orient;
	float last_aim_point_dist;
	float last_collision_fraction;
	float vertical_velocity;
	unsigned int flags;
	vector render_pos;
	matrix render_orient;
	free_mode_params free_params;
	lookaround_mode_params lookaround_params;
	thirdperson_mode_params third_person_params;
	mini_script_params mscript_params;
	cutscene_mode_params cscript_params;
	camera_view_data m_camera_view_data;
	bool m_dof_enable;
	float m_focus_start_A;
	float m_focus_start_B;
	float m_focus_end_A;
	float m_focus_end_B;
	float m_near_clip_dist;
	float m_far_clip_dist;
	float m_high_lod_far_clip_dist;
	bool culling_frustum_valid;
	rl_view_frustum m_culling_frustum;
};

/* 5225 */
struct IK_Joint //40
{
	int anchor_tag; //4
	int joint_tag; //4
	int ik_tag; //4
	float ik_strength; //4
	float ik_rate_of_change; //4
	unsigned int freeze_obj_handle; //4
	vector freeze_offset_pos; //12
	IK_Type location; //4, enum
};

/* 5226 */
struct MorphTarget //16
{
	float blend; //4
	float blend_target; //4
	float blend_rate; //4
	int target_idx; //4
};

/* 5227 */
struct /*__declspec(align(2))*/ HumanHeadMorphing //126 //__declspec(align(2)) HumanHeadMorphing //126
{
	int num_targets; //4
	MorphTarget target[5]; //16 * 5 = 80
	Timestamp blink_ts; //4
	float blink_blend; //4
	LipsyncDataHandle current_lipsync_handle; //4, enum
	float emotion_scale; //4
	unsigned int current_phn_start; //4
	unsigned int initial_phn_start; //4
	unsigned int current_phn_end; //4
	int total_duration; //4
	Timestamp timer; //4
	unsigned __int16 current_phn; //2
	__int8 do_blink_close : 1; //1
	__int8 do_blink_open : 1; //1
	__int8 do_blink_wait : 1; //1
	__int8 has_new_data : 1; //1
};

/* 5230 */
struct HumanCombat //230
{
	unsigned int last_hit_by_handle; //4
	unsigned int last_hit_by_other_handle; //4
	unsigned int last_hit_by_weapon_handle; //4
	unsigned int last_hit_by_other_weapon_handle; //4
	DamagedByTypes last_hit_by_damage_type; //4, enum
	DamagedByTypes last_hit_by_other_damage_type; //4, enum
	int last_hit_time_ms; //4
	int last_hit_by_other_time_ms; //4
	unsigned int last_killed_by_handle; //4
	unsigned int last_killed_by_other_handle; //4
	int last_killed_time_ms; //4
	int last_killed_by_other_time_ms; //4
	vector last_killed_pos; //12
	unsigned int last_kill_handle; //4
	unsigned int last_kill_other_handle; //4
	int last_kill_time_ms; //4
	int last_kill_other_time_ms; //4
	unsigned int target_handle; //4
	unsigned int targets_building_handle; //4
	void* cur_melee_combat_move; ///human_melee_combat_move_data* cur_melee_combat_move; //4
	int hit_object_count; //4
	vector last_continuous_pos; //12
	vector last_continuous_pos_2; //12
	bool played_hit_effect; //1
	float current_flank_offset; //4
	float flank_delta; //4
	Timestamp melee_damage_timer; //4
	Timestamp combat_maneuver_timestamp; //4
	Timestamp no_path_to_target_timestamp; //4
	Timestamp dodge_timestamp; //4
	Timestamp hold_trigger_timestamp; //4
	Timestamp shoot_enemy_timestamp; //4
	Timestamp move_to_melee_timestamp; //4
	Timestamp melee_attack_interval_timer; //4
	Timestamp flinch_timestamp; //4
	Timestamp melee_delay_timer; //4
	Timestamp beaten_up_timer; //4
	Timestamp combat_ready_timestamp; //4
	Timestamp combat_aim_timestamp; //4
	Timestamp combat_blindfire_timestamp; //4
	Timestamp pursuit_timestamp; //4
	Timestamp last_pursuit_timestamp; //4
	Timestamp throw_grenade_timestamp; //4
	unsigned int thrown_weapon; //4
	vector throw_velocity; //12
	bool thrown_weapon_released; //1
	unsigned int last_projectile_handle; //4
	unsigned int reserved_cover_node; //4
	unsigned int reserved_turret; //4
	Timestamp not_undercover_timestamp; //4
	Timestamp pain_sound_timestamp; //4
};

/* 5232 */
struct nano_callback_info //12
{
	unsigned int target_handle; //4
	bool killed_by_nano; //4
	int human_nano_index; //4
};

/* 5233 */
struct BaseArrayUINT //16
{
	void* vfptr;//base_array<unsigned int>Vtbl *vfptr; //4
	unsigned int* elt; //4
	int array_size; //4
	int num; //4
};

/* 5235 */
struct FArray16 : BaseArrayUINT //16 + 16 = 32 Bytes
{
	unsigned int data[4]; //16
};

/* 5236 */
struct __declspec(align(4)) human_action_node_data //53, align(4) -> 54 Bytes
{
	FArray16 action_node_set; //32
	int action_state; //4
	int action_sub_state; //4
	int existing_action_state; //4
	unsigned int current_action_node; //4
	Timestamp state_duration; //4
	bool exit_quick; //1
};

/* 5223 */
struct HumanRaycastHitInfo //44
{
	vector FirePosition; //12
	vector TargetPos; //12
	vector HitPoint; //12
	ObjectHitLocation hit_location; //4, enum
	int hit_bone; //4
};

/* 5162 */
struct CharacterInstanceRDD
{
	void* BaseCharacter;///character* base_character;
	void* RenderableInstance;///rl_skin_instance* renderable_instance_p;
};

/* 5163 */
struct __declspec(align(4)) CharacterInstanceData
{
	CharacterInstanceRDD m_data;
	bool m_loaded;
};

/* 5148 */
struct CharacterInstance
{
	int aim_handle;
	void* unimp_v_animate_pointer;///v_animate* vp;
	float orig_character_scale;
	float character_scale;
	unsigned __int16 ci_flags;
	char render_alpha;
	char cache_lod;
	int buf_verts_shadow_offset;
	char* buf_frame_verts;
	CharacterInstance* next;
	CharacterInstance* prev;
	unsigned int variant_index;
	float bbox_max_dimension;
	CharacterInstanceData rdd;
};

/* 5224 */
struct WeaponAnimationFlags //68
{
	unsigned __int32 prone : 1;
	unsigned __int32 crouch : 1;
	unsigned __int32 down_ready : 1;
	unsigned __int32 ready : 1;
	unsigned __int32 aim : 1;
	unsigned __int32 fine_aim : 1;
	unsigned __int32 no_ammo : 1;
	unsigned __int32 walk : 1;
	unsigned __int32 run : 1;
	unsigned __int32 left : 1;
	unsigned __int32 right : 1;
	unsigned __int32 back : 1;
	unsigned __int32 backpedal : 1;
	unsigned __int32 switching : 1;
	unsigned __int32 drive : 1;
	unsigned __int32 ride : 1;
	unsigned __int32 ride_left : 1;
};

/* 4203 */
struct $F0753B8D73BBECCB8B73BA0CFB418925 //4
{
	unsigned __int32 fast_mode : 1; //4
};

/* 4204 */
struct spinebend_bone_state //24 * 4 = 96 Bytes
{
	float heading; //4
	float pitch; //4
	float desired_heading; //4
	float desired_pitch; //4
	float last_heading; //4
	float last_pitch; //4
	float anim_last_bone_heading; //4
	float anim_last_bone_pitch; //4
	float anim_heading_change; //4
	float anim_pitch_change; //4
	float max_children_heading; //4
	float min_children_heading; //4
	float max_children_pitch; //4
	float min_children_pitch; //4
	float children_total_blend; //4
	float max_pitch; //4
	float min_pitch; //4
	float max_heading; //4
	float min_heading; //4
	float heading_vel; //4
	float pitch_vel; //4
	int bone_index; //4
	int rig_bone_parent; //4
	$F0753B8D73BBECCB8B73BA0CFB418925 flags; //4
};

/* 4201 */
struct spinebend_flags //72
{
	unsigned __int32 disabled : 1;
	unsigned __int32 track_object : 1;
	unsigned __int32 sleep_mode : 1;
	unsigned __int32 sleep_mode_ready : 1;
	unsigned __int32 no_spinebending_last_frame : 1;
	unsigned __int32 do_spinebend_process : 1;
	unsigned __int32 zero_pitch : 1;
	unsigned __int32 zero_heading : 1;
	unsigned __int32 zero_eye_pitch : 1;
	unsigned __int32 zero_eye_heading : 1;
	unsigned __int32 force_update : 1;
	unsigned __int32 is_player : 1;
	unsigned __int32 delay_processing : 1;
	unsigned __int32 blending_anims : 1;
	unsigned __int32 spinebend_teleport : 1;
	unsigned __int32 linear_interpolation : 1;
	unsigned __int32 aim_at_pos : 1;
	unsigned __int32 pan_dir : 1;
};

struct anim_bone
{
	et_ptr_offset<char, 0> name;
	vector inv_translation;
	vector rel_bone_translation;
	int parent_index;
	int vid;
};

struct anim_tag
{
	et_ptr_offset<char, 0> name;
	matrix43 transformation;
	int parent_index;
	int vid;
};

struct anim_rig
{
	char name[32];
	unsigned int flags;
	int num_bones;
	int num_common_bones;
	int num_virtual_bones;
	int num_tags;
	unsigned int* bone_name_chksums;
	anim_bone *bones;
	anim_tag *tags;
	unsigned int data_size;
	char *original_buffer;
};

/* 4205 */
struct HumanSpinebendData //1108 Bytes
{
	spinebend_flags flags; //72
	unsigned int target_object_handle; //4
	vector target_point; //12
	vector last_lookat_vec; //12
	spinebend_interest main_interest; //4, enum
	spinebend_interest head_interest; //4, enum
	spinebend_interest eyes_interest; //4, enum
	spinebend_interest last_eyes_interest; //4, enum
	vector head_dest_vec; //12
	vector eyes_dest_vec; //12
	float lookat_priority; //4
	float eye_lookat_priority; //4
	Timestamp head_orient_ts; //4
	Timestamp main_interest_ts; //4
	Timestamp eyes_orient_ts; //4
	Timestamp focus_target_ts; //4
	float pan_heading; //4
	Timestamp pan_ts; //4
	Timestamp update_timestamp; //4
	float remaining_heading; //4
	float lower_body_rotation; //4
	float lower_body_heading_speed; //4
	float spinebend_bone_rotation; //4
	float spinebend_bone_last_heading; //4
	float root_heading_change; //4
	float root_heading_last_frame; //4
	int spinebend_bone_index; //4
	float turn_speed; //4
	float heading_drift; //4
	float pitch_drift; //4
	unsigned int bone_filter; //4
	float bone_max_angle_multiplier; //4
	int aim_handle; //4
	vector state_controller_movement; //12
	spinebend_bone_state bone_state[9]; //9 * 96 = 864 Bytes
};

/* 4048 */
struct checksum_stri
{
	unsigned int checksum;
};

/* 5180 */
struct inv_item_info
{
	char *name;
	checksum_stri name_checksum;
	char *display_name;
	int cost;
	int default_count;
	int max_item;
	char *description;
	void* weapon_info;///weapon_info *w_info;
	char item_order;
	bool(__cdecl *use)();
};

/* 5231 */
struct InventoryItem
{
	InventoryItem *next;
	InventoryItem *prev;
	inv_item_info *info;
	int count;
	int selection_slot;
	int attachment_prop;
	unsigned int weapon_handle;
};

/* 5221 */
struct $44C0BA19B9554B4F1413675B767343EF //3
{
	__int8 turn_right : 1; //1
	__int8 smoothing : 1; //1
	__int8 climbing_up : 1; //1
};

/* 5220 */
struct $CAF8DE907F29E1426E7531D75E1C3ADA
{
	__int8 do_not_remove : 1;
	__int8 jumping : 1;
	__int8 dropping_down : 1;
	__int8 leap_over : 1;
	__int8 ladder : 1;
	__int8 optimized : 1;
	__int8 off_navmesh : 1;
	__int8 bridge : 1;
	__int8 stairs : 1;
};

/* 5219 */
struct /*__declspec(align(4))*/ path_node
{
	path_node *next;
	path_node *prev;
	vector pos;
	unsigned __int64 nav_cell_handle;
	unsigned int navpoint_handle;
	vector normal;
	float distance_left;
	unsigned int compound_hull_handle;
	int compound_hull_vert_index;
	$CAF8DE907F29E1426E7531D75E1C3ADA flags;
};

/* 5222 */
struct __declspec(align(8)) HumanPathData //278 align(8) -> 280
{
	human_path_actions action; //4, enum
	HumanMovementStates prev_state; //4, enum
	path_node* path; //4
	Timestamp shortcut_time; //4
	Timestamp dest_in_hull_time; //4
	vector start_pos; //12
	unsigned __int64 last_visited_nav_cell_handle; //8
	Timestamp last_visited_nav_cell_update_timer; //4
	Timestamp dest_check_timer; //4
	vector last_dest_check_pos; //12
	int extended_stuck_cumulative; //4
	Timestamp extended_stuck_timer; //4
	vector extended_stuck_pos; //12
	Timestamp detour_hull_check_timer; //4
	unsigned int problem_detour_handles[4]; //16
	int num_problem_detours; //4
	vector problem_detours_dest_pos; //12
	char affected_by_repulsors; //1
	char num_path_repulsors; //1
	unsigned int path_repulsor_handles[8]; //32
	Timestamp path_repulsors_collection_time; //4
	Timestamp repulsion_field_timer; //4
	Timestamp hole_repulsion_field_timer; //4
	vector eventual_goal_pos; //12
	float dist_until_recheck; //4
	char num_hole_repulsors; //1
	unsigned int hole_repulsors[8]; //32
	unsigned int last_cmp_hull; //4
	unsigned int transition_node_to_avoid; //4
	float movement_radius; //4
	float curve_distance; //4
	vector smoothPoint; //12
	vector center_of_circle; //12
	vector smooth_start_pos; //12
	vector smooth_start_fvec; //12
	$44C0BA19B9554B4F1413675B767343EF flags; //3
};

class HumanFlags //128 * 4 = 512 Bytes
{
public:
	HumanFlags()
	{
		bored_headtrack_disabled = 0;
		hidden = 0;
		cap_speed = 0;
		was_rendered = 0;
		locked_controller = 0;
		invulnerable = 0;
		mission_invulnerable = 0;
		no_damage = 0;
		activity_engage = 0;
		considered_armed = 0;
		riot_shield = 0;
		safehouse_vip = 0;
		radio_operator = 0;
		activity_raid_required = 0;
		activity_raid_optional = 0;
		activity_ha_hostage = 0;
		raid_introduction_lines = 0;
		miner_persona_lines = 0;
		damaged_by_player = 0;
		ai_ignore = 0;
		casts_shadows = 0;
		casts_drop_shadows = 0;
		is_turning = 0;
		is_falling = 0;
		dont_deform_bones = 0;
		dont_lod_bones = 0;
		playing_equip_anim = 0;
		playing_unequip_anim = 0;
		do_instant_equip = 0;
		anim_direct_blend = 0;
		start_jump = 0;
		super_jump  = 0;
		processed_this_frame = 0;
		silent_vehicle_start = 0;
		suppress_flee_on_vehicle_exit = 0;
		death_func_done = 0;
		fading_in = 0;
		fading_out = 0;
		fading_out_from_nano = 0;
		is_nano_effect_currently_applied = 0;
		on_fire = 0;
		dropped_cash = 0;
		on_mover = 0;
		recalculate_at_node = 0;
		spinebending_done = 0;
		last_dest_in_repulsor = 0;
		jumping_from_building = 0;
		is_on_ladder = 0;
		ladder_force_slide = 0;
		ladder_force_exit = 0;
		ladder_reequip_weapon = 0;
		allow_flying_equips = 0;
		corpse_spotted = 0;
		corpse_spotted_by_enemy = 0;
		death_reported = 0;
		raid_death_ack = 0;
		anchor_orient = 0;
		bones_transformed_this_frame = 0;
		use_current_velocity = 0;
		use_as_final_velocity = 0;
		aim_at_pos = 0;
		block_forced_movement = 0;
		cancelling_melee_attack = 0;
		do_continuous_melee_damage = 0;
		in_air_melee = 0;
		cant_hit_with_melee = 0;
		invulnerable_to_debris = 0;
		override_default_anim_state = 0;
		override_default_fire_anim = 0;
		moving_and_transitioning_states = 0;
		check_for_cover = 0;
		jump_take_off = 0;
		rotate_internal_heading_updated = 0;
		crouch_cover = 0;
		cover_crouch_high_only = 0;
		cover_crouch_no_lean = 0;
		side_firing = 0;
		side_firing_walk_back = 0;
		ragdoll_on_impact_all_collisions = 0;
		ragdoll_on_impact_use_ragdoll_pos = 0;
		dive_capsule = 0;
		maintain_ambient_props = 0;
		leaning_disabled = 0; 
		override_steering_heading_offset = 0;
		pushes_other_humans = 0;
		pushes_debris_scripted = 0;
		allow_steep_slopes = 0;
		external_force_applied = 0;
		ragdoll_shot = 0;
		saved_pushes_debris_scripted = 0;
		filter_handle_valid = 0;
		just_got_up_from_ragdoll = 0;
		disable_path_smoothing_for_request = 0;
		disable_all_path_smoothing = 0;
		in_fetal_position = 0;
		disallow_vehicle_exit = 0;
		limited_vehicle_exit = 0;
		driverless_exit_only = 0;
		stuck_in_vehicle = 0;
		convoy_vehicle_exit = 0;
		disallow_vehicle_entry = 0;
		disallow_vehicle_drive = 0;
		ambient_edf = 0;
		bashed_character_controller = 0;
		head_loaded = 0;
		lod_head_loaded = 0;
		in_vehicle_invisible = 0;
		high_priority_target = 0;
		health_change_was_negative = 0;
		voice_line_play_2d = 0;
		voice_line_pain_only = 0;
		killed_by_killzone = 0;
		first_time_streamed = 0;
		tired = 0;
		use_bigsteps = 0;
		stuck = 0;
		last_pf_failed = 0;
		extended_stuck = 0;
		xray_visible = 0;
		was_gibbed = 0;
		prevent_ragdoll_sfx = 0;
		always_show_on_minimap = 0;
		used_death_buffer = 0;
		do_not_convert_to_guerrilla = 0;
		do_not_play_ambient_or_greet_lines = 0;
		disallow_flinches_and_ragdolls = 0;
		only_use_action_nodes = 0;
		complain_when_shot = 0;
	}
	HumanFlags(const HumanFlags& Copy)
	{
		bored_headtrack_disabled = Copy.bored_headtrack_disabled;
		hidden = Copy.hidden;
		cap_speed = Copy.cap_speed;
		was_rendered = Copy.was_rendered;
		locked_controller = Copy.locked_controller;
		invulnerable = Copy.invulnerable;
		mission_invulnerable = Copy.mission_invulnerable;
		no_damage = Copy.no_damage;
		activity_engage = Copy.activity_engage;
		considered_armed = Copy.considered_armed;
		riot_shield = Copy.riot_shield;
		safehouse_vip = Copy.safehouse_vip;
		radio_operator = Copy.radio_operator;
		activity_raid_required = Copy.activity_raid_required;
		activity_raid_optional = Copy.activity_raid_optional;
		activity_ha_hostage = Copy.activity_ha_hostage;
		raid_introduction_lines = Copy.raid_introduction_lines;
		miner_persona_lines = Copy.miner_persona_lines;
		damaged_by_player = Copy.damaged_by_player;
		ai_ignore = Copy.ai_ignore;
		casts_shadows = Copy.casts_shadows;
		casts_drop_shadows = Copy.casts_drop_shadows;
		is_turning = Copy.is_turning;
		is_falling = Copy.is_falling;
		dont_deform_bones = Copy.dont_deform_bones;
		dont_lod_bones = Copy.dont_lod_bones;
		playing_equip_anim = Copy.playing_equip_anim;
		playing_unequip_anim = Copy.playing_unequip_anim;
		do_instant_equip = Copy.do_instant_equip;
		anim_direct_blend = Copy.anim_direct_blend;
		start_jump = Copy.start_jump;
		super_jump = Copy.super_jump;
		processed_this_frame = Copy.processed_this_frame;
		silent_vehicle_start = Copy.silent_vehicle_start;
		suppress_flee_on_vehicle_exit = Copy.suppress_flee_on_vehicle_exit;
		death_func_done = Copy.death_func_done;
		fading_in = Copy.fading_in;
		fading_out = Copy.fading_out;
		fading_out_from_nano = Copy.fading_out_from_nano;
		is_nano_effect_currently_applied = Copy.is_nano_effect_currently_applied;
		on_fire = Copy.on_fire;
		dropped_cash = Copy.dropped_cash;
		on_mover = Copy.on_mover;
		recalculate_at_node = Copy.recalculate_at_node;
		spinebending_done = Copy.spinebending_done;
		last_dest_in_repulsor = Copy.last_dest_in_repulsor;
		jumping_from_building = Copy.jumping_from_building;
		is_on_ladder = Copy.is_on_ladder;
		ladder_force_slide = Copy.ladder_force_slide;
		ladder_force_exit = Copy.ladder_force_exit;
		ladder_reequip_weapon = Copy.ladder_reequip_weapon;
		allow_flying_equips = Copy.allow_flying_equips;
		corpse_spotted = Copy.corpse_spotted;
		corpse_spotted_by_enemy = Copy.corpse_spotted_by_enemy;
		death_reported = Copy.death_reported;
		raid_death_ack = Copy.raid_death_ack;
		anchor_orient = Copy.anchor_orient;
		bones_transformed_this_frame = Copy.bones_transformed_this_frame;
		use_current_velocity = Copy.use_current_velocity;
		use_as_final_velocity = Copy.use_as_final_velocity;
		aim_at_pos = Copy.aim_at_pos;
		block_forced_movement = Copy.block_forced_movement;
		cancelling_melee_attack = Copy.cancelling_melee_attack;
		do_continuous_melee_damage = Copy.do_continuous_melee_damage;
		in_air_melee = Copy.in_air_melee;
		cant_hit_with_melee = Copy.cant_hit_with_melee;
		invulnerable_to_debris = Copy.invulnerable_to_debris;
		override_default_anim_state = Copy.override_default_anim_state;
		override_default_fire_anim = Copy.override_default_fire_anim;
		moving_and_transitioning_states = Copy.moving_and_transitioning_states;
		check_for_cover = Copy.check_for_cover;
		jump_take_off = Copy.jump_take_off;
		rotate_internal_heading_updated = Copy.rotate_internal_heading_updated;
		crouch_cover = Copy.crouch_cover;
		cover_crouch_high_only = Copy.cover_crouch_high_only;
		cover_crouch_no_lean = Copy.cover_crouch_no_lean;
		side_firing = Copy.side_firing;
		side_firing_walk_back = Copy.side_firing_walk_back;
		ragdoll_on_impact_all_collisions = Copy.ragdoll_on_impact_all_collisions;
		ragdoll_on_impact_use_ragdoll_pos = Copy.ragdoll_on_impact_use_ragdoll_pos;
		dive_capsule = Copy.dive_capsule;
		maintain_ambient_props = Copy.maintain_ambient_props;
		leaning_disabled = Copy.leaning_disabled;
		override_steering_heading_offset = Copy.override_steering_heading_offset;
		pushes_other_humans = Copy.pushes_other_humans;
		pushes_debris_scripted = Copy.pushes_debris_scripted;
		allow_steep_slopes = Copy.allow_steep_slopes;
		external_force_applied = Copy.external_force_applied;
		ragdoll_shot = Copy.ragdoll_shot;
		saved_pushes_debris_scripted = Copy.saved_pushes_debris_scripted;
		filter_handle_valid = Copy.filter_handle_valid;
		just_got_up_from_ragdoll = Copy.just_got_up_from_ragdoll;
		disable_path_smoothing_for_request = Copy.disable_path_smoothing_for_request;
		disable_all_path_smoothing = Copy.disable_all_path_smoothing;
		in_fetal_position = Copy.in_fetal_position;
		disallow_vehicle_exit = Copy.disallow_vehicle_exit;
		limited_vehicle_exit = Copy.limited_vehicle_exit;
		driverless_exit_only = Copy.driverless_exit_only;
		stuck_in_vehicle = Copy.stuck_in_vehicle;
		convoy_vehicle_exit = Copy.convoy_vehicle_exit;
		disallow_vehicle_entry = Copy.disallow_vehicle_entry;
		disallow_vehicle_drive = Copy.disallow_vehicle_drive;
		ambient_edf = Copy.ambient_edf;
		bashed_character_controller = Copy.bashed_character_controller;
		head_loaded = Copy.head_loaded;
		lod_head_loaded = Copy.lod_head_loaded;
		in_vehicle_invisible = Copy.in_vehicle_invisible;
		high_priority_target = Copy.high_priority_target;
		health_change_was_negative = Copy.health_change_was_negative;
		voice_line_play_2d = Copy.voice_line_play_2d;
		voice_line_pain_only = Copy.voice_line_pain_only;
		killed_by_killzone = Copy.killed_by_killzone;
		first_time_streamed = Copy.first_time_streamed;
		tired = Copy.tired;
		use_bigsteps = Copy.use_bigsteps;
		stuck = Copy.stuck;
		last_pf_failed = Copy.last_pf_failed;
		extended_stuck = Copy.extended_stuck;
		xray_visible = Copy.xray_visible;
		was_gibbed = Copy.was_gibbed;
		prevent_ragdoll_sfx = Copy.prevent_ragdoll_sfx;
		always_show_on_minimap= Copy.always_show_on_minimap;
		used_death_buffer = Copy.used_death_buffer;
		do_not_convert_to_guerrilla = Copy.do_not_convert_to_guerrilla;
		do_not_play_ambient_or_greet_lines = Copy.do_not_play_ambient_or_greet_lines;
		disallow_flinches_and_ragdolls = Copy.disallow_flinches_and_ragdolls;
		only_use_action_nodes = Copy.only_use_action_nodes;
		complain_when_shot= Copy.complain_when_shot;
	}
	bool bored_headtrack_disabled : 1;
	bool hidden : 1;
	bool cap_speed : 1;
	bool was_rendered : 1;
	bool locked_controller : 1;
	bool invulnerable : 1;
	bool mission_invulnerable : 1;
	bool no_damage : 1;
	bool activity_engage : 1;
	bool considered_armed : 1;
	bool riot_shield : 1;
	bool safehouse_vip : 1;
	bool radio_operator : 1;
	bool activity_raid_required : 1;
	bool activity_raid_optional : 1;
	bool activity_ha_hostage : 1;
	bool raid_introduction_lines : 1;
	bool miner_persona_lines : 1;
	bool damaged_by_player : 1;
	bool ai_ignore : 1;
	bool casts_shadows : 1;
	bool casts_drop_shadows : 1;
	bool is_turning : 1;
	bool is_falling : 1;
	bool dont_deform_bones : 1;
	bool dont_lod_bones : 1;
	bool playing_equip_anim : 1;
	bool playing_unequip_anim : 1;
	bool do_instant_equip : 1;
	bool anim_direct_blend : 1;
	bool start_jump : 1;
	bool super_jump : 1;
	bool processed_this_frame : 1;
	bool silent_vehicle_start : 1;
	bool suppress_flee_on_vehicle_exit : 1;
	bool death_func_done : 1;
	bool fading_in : 1;
	bool fading_out : 1;
	bool fading_out_from_nano : 1;
	bool is_nano_effect_currently_applied : 1;
	bool on_fire : 1;
	bool dropped_cash : 1;
	bool on_mover : 1;
	bool recalculate_at_node : 1;
	bool spinebending_done : 1;
	bool last_dest_in_repulsor : 1;
	bool jumping_from_building : 1;
	bool is_on_ladder : 1;
	bool ladder_force_slide : 1;
	bool ladder_force_exit : 1;
	bool ladder_reequip_weapon : 1;
	bool allow_flying_equips : 1;
	bool corpse_spotted : 1;
	bool corpse_spotted_by_enemy : 1;
	bool death_reported : 1;
	bool raid_death_ack : 1;
	bool anchor_orient : 1;
	bool bones_transformed_this_frame : 1;
	bool use_current_velocity : 1;
	bool use_as_final_velocity : 1;
	bool aim_at_pos : 1;
	bool block_forced_movement : 1;
	bool cancelling_melee_attack : 1;
	bool do_continuous_melee_damage : 1;
	bool in_air_melee : 1;
	bool cant_hit_with_melee : 1;
	bool invulnerable_to_debris : 1;
	bool override_default_anim_state : 1;
	bool override_default_fire_anim : 1;
	bool moving_and_transitioning_states : 1;
	bool check_for_cover : 1;
	bool jump_take_off : 1;
	bool rotate_internal_heading_updated : 1;
	bool crouch_cover : 1;
	bool cover_crouch_high_only : 1;
	bool cover_crouch_no_lean : 1;
	bool side_firing : 1;
	bool side_firing_walk_back : 1;
	bool ragdoll_on_impact_all_collisions : 1;
	bool ragdoll_on_impact_use_ragdoll_pos : 1;
	bool dive_capsule : 1;
	bool maintain_ambient_props : 1;
	bool leaning_disabled : 1;
	bool override_steering_heading_offset : 1;
	bool pushes_other_humans : 1;
	bool pushes_debris_scripted : 1;
	bool allow_steep_slopes : 1;
	bool external_force_applied : 1;
	bool ragdoll_shot : 1;
	bool saved_pushes_debris_scripted : 1;
	bool filter_handle_valid : 1;
	bool just_got_up_from_ragdoll : 1;
	bool disable_path_smoothing_for_request : 1;
	bool disable_all_path_smoothing : 1;
	bool in_fetal_position : 1;
	bool disallow_vehicle_exit : 1;
	bool limited_vehicle_exit : 1;
	bool driverless_exit_only : 1;
	bool stuck_in_vehicle : 1;
	bool convoy_vehicle_exit : 1;
	bool disallow_vehicle_entry : 1;
	bool disallow_vehicle_drive : 1;
	bool ambient_edf : 1;
	bool bashed_character_controller : 1;
	bool head_loaded : 1;
	bool lod_head_loaded : 1;
	bool in_vehicle_invisible : 1;
	bool high_priority_target : 1;
	bool health_change_was_negative : 1;
	bool voice_line_play_2d : 1;
	bool voice_line_pain_only : 1;
	bool killed_by_killzone : 1;
	bool first_time_streamed : 1;
	bool tired : 1;
	bool use_bigsteps : 1;
	bool stuck : 1;
	bool last_pf_failed : 1;
	bool extended_stuck : 1;
	bool xray_visible : 1;
	bool was_gibbed : 1;
	bool prevent_ragdoll_sfx : 1;
	bool always_show_on_minimap : 1;
	bool used_death_buffer : 1;
	bool do_not_convert_to_guerrilla : 1;
	bool do_not_play_ambient_or_greet_lines : 1;
	bool disallow_flinches_and_ragdolls : 1;
	bool only_use_action_nodes : 1;
	bool complain_when_shot : 1;
};

class HumanMPFlags //17 * 4 = 68 Bytes
{
public:
	HumanMPFlags()
	{
		is_multiplayer = 0;
		melee_primary_id = 0;
		melee_secondary_id = 0;
		melee_tertiary_id = 0;
		melee_firearm_id = 0;
		jump_id = 0;
		vehicle = 0;
		turret = 0;
		swap_weapon = 0;
		firearm_trigger_down_id = 0;
		firearm_trigger_up_id = 0;
		throw_attack_id = 0;
		charge_weapon = 0;
		running_attack = 0;
		in_air_detonate = 0;
		detonated_charges = 0;
		jetpack = 0;
	}	
	HumanMPFlags(const HumanMPFlags& Copy)
	{
		is_multiplayer = Copy.is_multiplayer;
		melee_primary_id = Copy.melee_primary_id;
		melee_secondary_id = Copy.melee_secondary_id;
		melee_tertiary_id = Copy.melee_tertiary_id;
		melee_firearm_id = Copy.melee_firearm_id;
		jump_id = Copy.jump_id;
		vehicle	= Copy.vehicle;
		turret = Copy.turret;
		swap_weapon = Copy.swap_weapon;
		firearm_trigger_down_id = Copy.firearm_trigger_down_id;
		firearm_trigger_up_id = Copy.firearm_trigger_up_id;
		throw_attack_id = Copy.throw_attack_id;
		charge_weapon = Copy.charge_weapon;
		running_attack = Copy.running_attack;
		in_air_detonate = Copy.in_air_detonate;
		detonated_charges = Copy.detonated_charges;
		jetpack = Copy.jetpack;
	}
	unsigned __int32 is_multiplayer : 1;
	unsigned __int32 melee_primary_id : 2;
	unsigned __int32 melee_secondary_id : 2;
	unsigned __int32 melee_tertiary_id : 2;
	unsigned __int32 melee_firearm_id : 2;
	unsigned __int32 jump_id : 2;
	unsigned __int32 vehicle : 1;
	unsigned __int32 turret : 1;
	unsigned __int32 swap_weapon : 1;
	unsigned __int32 firearm_trigger_down_id : 2;
	unsigned __int32 firearm_trigger_up_id : 2;
	unsigned __int32 throw_attack_id : 2;
	unsigned __int32 charge_weapon : 2;
	unsigned __int32 running_attack : 1;
	unsigned __int32 in_air_detonate : 1;
	unsigned __int32 detonated_charges : 1;
	unsigned __int32 jetpack : 1;
};

struct HumanResourceDependentData
{   //Todo: Define character controller.
	void* CharacterController; ///character_controller *controller;
	void* HKPSimpleShapePhantom; ///hkpSimpleShapePhantom *hit_detect_phantom;
	void* SkinInstance; ///rl_skin_instance *head_renderable_instance_p;
	int head_aim_handle;
	int head_manager_idx;
};

struct __declspec(align(4)) HumanResourceDependentDataContainer //5, align -> 8 Bytes
{
	HumanResourceDependentData m_data; //4
	bool m_loaded; //1
};

struct foot_ground_effects
{
	char name[20];
	int walk_foley;
	int run_foley;
	int jump_foley;
	int land_foley;
	unsigned int(**footstep)[5][2][2];
	unsigned int(**jump)[5][2];
};

struct ObjectRenderDistance //8
{
	float apparent_distance; //4
	int last_frame_processed; //4
};

struct human_info_inventory_info //12
{
	inv_item_info *i_info; //4
	int count; //4
	int slot; //4
};

struct char_def_head
{
	char *name;
	char *lod_name;
	void* BaseHeadInfo;///item_info* base_head_info;
	void* BaseHead;	///character* base_head;
	void* LODMesh;///character_mesh* lod_mesh;
	anim_rig* rig;
	unsigned int morph_mat_srid;
	int head_morph;
	int base_head_morph;
	int num_skin_shader_params;
	float skin_shader_params[3][5];
};

/* 5215 */
struct human_prop_info
{
	void* ItemInfo;//item_info *item;
	char *item_prop_tag;
	char *character_prop_tag;
	int character_prop_index;
	float appearance_percent;
	int num_sub_props;
	human_prop_info* sub_props;
};

/* 5216 */
struct human_prop_general_info
{
	char *prop_name;
	float appearance_percent;
	prop_type m_prop_type;
	int num_props;
	human_prop_info *props;
};

/* 5217 */
struct human_info_flags //19
{
	__int8 female : 1;
	__int8 coin : 1;
	__int8 preload : 1;
	__int8 officer : 1;
	__int8 unarmed : 1;
	__int8 vip : 1;
	__int8 use_tech_level : 1;
	__int8 sniper : 1;
	__int8 elite_dodge : 1;
	__int8 riot_shield : 1;
	__int8 body_armor : 1;
	__int8 nonflammable : 1;
	__int8 no_attaching_projectiles : 1;
	__int8 guerrilla_tech : 1;
	__int8 guerrilla_rfc : 1;
	__int8 old_coot : 1;
	__int8 dan : 1;
	__int8 jenkins : 1;
	bool driverless_exit_only;
};

struct voice_persona_list //16
{
	char voice_list[16];
	 //rfg::base_array<human_voice_persona*> voice_list; //16
};

class HumanInfo //397
{
public:
  int max_hit_points; //4
  int max_knockdown_hits; //4
  float max_speed; //4
  inv_item_info* default_equip_item; //4
  inv_item_info* default_last_equip_item; //4
  char* name;  //4
  unsigned int name_crc; //4
  char* model_name; //4
  char* anim_set_name; //4
  unsigned int anim_set_name_crc; //4
  char* rig_name; //4
  unsigned int srid; //4
  int slot_id; //4
  float default_height_scale; //4
  float height_scale_variation; //4
  HumanTeams default_team; //4, enum
  __int16 hurt_threshold; //2
  int home_district; //4
  float aim_error_pct; //4
  foot_ground_effects* foot_effects; //4
  int num_heads; //4
  char_def_head* heads[4]; //16, This is a array of pointers, each 4 bytes since the game is 32bit
  voice_persona_list voice_personas; //16
  rfg::farray<human_info_inventory_info, 15> default_inventory; //196
  int num_general_props; //4
  human_prop_general_info* general_props; //4
  int lower_spine_bone_index; //4
  int upper_spine_bone_index; //4
  int pelvis_bone_index; //4
  int head_bone_index; //4
  int neck_bone_index; //4
  int eye_l_bone_index; //4
  int eye_r_bone_index; //4
  int calf_l_bone_index; //4
  int calf_r_bone_index; //4
  int camera_bone_index; //4
  int drop_cash_min; //4
  int drop_cash_max; //4
  unsigned int light_effect_handle; //4
  char* light_tag_names[2]; //8, array of pointers
  human_info_flags flags; //19
};

class hkpBroadPhaseHandle
{
public:
	unsigned int m_id;
};

class HavokBPO : hkpBroadPhaseHandle
{
public:
	HavokBPO()
	{
		flags = 0;
		state = 0;
		bpo_index = 0;
		state_index = 0;
		owner = 0;
		next = 0;
		prev = 0;
		user_data = nullptr;
	}
	HavokBPO(const HavokBPO& Copy)
	{
		flags = Copy.flags;
		state = Copy.state;
		bpo_index = Copy.bpo_index;
		state_index = Copy.state_index;
		owner = Copy.owner;
		next = Copy.next;
		prev = Copy.prev;
		user_data = Copy.user_data;
	}
	char flags;
	char state;
	__int16 bpo_index;
	__int16 state_index;
	unsigned __int16 owner;
	unsigned __int16 next;
	unsigned __int16 prev;
	void *user_data;
};

class AttachInfoData
{
public:
	AttachInfoData()
	{
		parent_handle = 0;
		parent_prop_point = 0;
		child_prop_point = 0;
		relative_transform.SetAll(0.0f);
		use_relative_transform = 0;
		update_physics = 0;
		updated = 0;
	}
	AttachInfoData(const AttachInfoData& Copy)
	{
		parent_handle = Copy.parent_handle;
		parent_prop_point = Copy.parent_prop_point;
		child_prop_point = Copy.child_prop_point;
		relative_transform = Copy.relative_transform;
		use_relative_transform = Copy.use_relative_transform;
		update_physics = Copy.update_physics;
		updated = Copy.updated;
	}
	int parent_handle;
	int parent_prop_point;
	int child_prop_point;
	matrix43 relative_transform; //60 bytes including this
	unsigned __int32 use_relative_transform : 1;
	unsigned __int32 update_physics : 1;
	unsigned __int32 updated : 1;
};

class ContactNode //16
{
public:
	ContactNode()
	{
		m_contacted_object = 0;
		m_num_contacts = 0;
		prev = nullptr;
		next = nullptr;
	}
	ContactNode(const ContactNode& Copy)
	{
		m_contacted_object = Copy.m_contacted_object;
		m_num_contacts = Copy.m_num_contacts;
		prev = Copy.prev;
		next = Copy.next;
	}
	unsigned int m_contacted_object; //4
	unsigned __int16 m_num_contacts; //4
	ContactNode* prev; //4
	ContactNode* next; //4
};

class ObjectContactInfo //4
{
public:
	ObjectContactInfo()
	{
		m_contact_list = nullptr;
	}
	ObjectContactInfo(const ObjectContactInfo& Copy)
	{
		m_contact_list = Copy.m_contact_list;
	}
	ContactNode* m_contact_list; //4
};

class RemoteObjectFlags //5
{
public:
	RemoteObjectFlags()
	{
		remote_object = 0;
		client_sync = 0;
		client_destroy_permission = 0;
		no_destroy_packet = 0;
		common_create = 0;
	}
	RemoteObjectFlags(const RemoteObjectFlags& Copy)
	{
		remote_object = Copy.remote_object;
		client_sync = Copy.client_sync;
		client_destroy_permission = Copy.client_destroy_permission;
		no_destroy_packet = Copy.no_destroy_packet;
		common_create = Copy.common_create;
	}
	__int8 remote_object : 1;
	__int8 client_sync : 1;
	__int8 client_destroy_permission : 1;
	__int8 no_destroy_packet : 1;
	__int8 common_create : 1;
};

class ObjectFlags //23 * 1 = 23 Bytes
{
public:
	ObjectFlags()
	{
		flagged_list_state = 0;
		lighting_set_once = 0;
		destroyed = 0;
		no_save = 0;
		force_full_save = 0;
		destroy_on_stream = 0;
		created_by_mission_or_activity = 0;
		dont_transform = 0;
		world_free = 0;
		streaming = 0;
		streamed = 0;
		persistent = 0;
		original = 0;
		stub = 0;
		preserve_handle = 0;
		bpo_index = 0;
		is_dependent = 0;
		visited = 0;
		special_lifetime = 0;
		serialize_protected = 0;
		_dont_use_me = 0;
		streaming_fixed = 0;
		render_flags = 0;
	}
	ObjectFlags(const ObjectFlags& Copy)
	{
		flagged_list_state = Copy.flagged_list_state;
		lighting_set_once = Copy.lighting_set_once;
		destroyed = Copy.destroyed;
		no_save = Copy.no_save;
		force_full_save = Copy.force_full_save;
		destroy_on_stream = Copy.destroy_on_stream;
		created_by_mission_or_activity = Copy.created_by_mission_or_activity;
		dont_transform = Copy.dont_transform;
		world_free = Copy.world_free;
		streaming = Copy.streaming;
		streamed = Copy.streamed;
		persistent = Copy.persistent;
		original = Copy.original;
		stub = Copy.stub;
		preserve_handle = Copy.preserve_handle;
		bpo_index = Copy.bpo_index;
		is_dependent = Copy.is_dependent;
		visited = Copy.visited;
		special_lifetime = Copy.special_lifetime;
		serialize_protected = Copy.serialize_protected;
		_dont_use_me = Copy._dont_use_me;
		streaming_fixed = Copy.streaming_fixed;
		render_flags = Copy.render_flags;
	}
	__int8 flagged_list_state : 3; //1 - offset = 84
	__int8 lighting_set_once : 1; //1 - offset = 85
	__int8 destroyed : 1; // - offset = 86
	__int8 no_save : 1;
	__int8 force_full_save : 1;
	__int8 destroy_on_stream : 1;
	__int8 created_by_mission_or_activity : 1;
	__int8 dont_transform : 1;
	__int8 world_free : 1;
	__int8 streaming : 1;
	__int8 streamed : 1;
	__int8 persistent : 1;
	__int8 original : 1;
	__int8 stub : 1;
	__int8 preserve_handle : 1;
	__int8 bpo_index : 2;
	__int8 is_dependent : 1;
	__int8 visited : 1;
	__int8 special_lifetime : 1;
	__int8 serialize_protected : 1;
	__int8 _dont_use_me : 1;
	__int8 streaming_fixed : 1;
	__int8 render_flags : 4;
};

/*/* 5248 /
struct Object;
struct objectVtbl
{
	void *(__thiscall *__vecDelDtor)(object *this, unsigned int);
	_BYTE gap4[16];
	bool(__thiscall *serialize)(object *this, obj_prop_block *, bool);
	obj_serialize_mode(__thiscall *serialize_mode)(object *this);
	bool(__thiscall *stream)(object *this, bool);
	bool(__thiscall *serialize_restore_if_missing_in_save_file)(object *this, obj_prop_block *);
	bool(__thiscall *serialize_restore_if_resetting_destruction)(object *this, obj_prop_block *);
	void(__thiscall *free_this)(object *this);
	void(__thiscall *destroy_notify)(object *this);
	void(__thiscall *update_pos_and_orient)(object *this, vector *, matrix *, bool);
	int(__thiscall *get_tag_index_from_name)(object *this, const char *);
	bool(__thiscall *get_tag_world_coords)(object *this, int, vector *, matrix *, vector *, matrix *);
	bool(__thiscall *get_tag_local_coords)(object *this, int, vector *, matrix *);
	const struct rl_renderable_mesh *(__thiscall *get_static_mesh)(object *this);
	void(__thiscall *update_render)(object *this, rl_renderer *);
	bool(__thiscall *enable_object_outline)(object *this, int);
	bool(__thiscall *disable_object_outline)(object *this);
	int(__thiscall *attach_index)(object *this, vector *, unsigned int);
	bool(__thiscall *attach_index_is_valid)(object *this, int);
	float(__thiscall *get_mass)(object *this);
	char(__thiscall *get_physical_material)(object *this, unsigned int, vector *, hkpWorldObject *);
	char(__thiscall *get_effect_material)(object *this, unsigned int, vector *, hkpWorldObject *);
	float(__thiscall *get_energy_scale)(object *this);
	void(__thiscall *process_bullet_hit)(object *this, human *, float, weapon_fire_info *);
	bool(__thiscall *process_melee_hit)(object *this, object *, float, vector *, vector *, vector *, unsigned int, weapon_info *);
	void(__thiscall *hierarchy_notify)(object *this, hierarchy_notify_code);
	bool(__thiscall *ready_to_stream_out)(object *this);
	unsigned int(__thiscall *get_alt_hk_body_handle)(object *this, unsigned int);
	unsigned int(__thiscall *get_alt_hk_body_handle_index)(object *this, unsigned int);
	void(__thiscall *pool_free)(object *this);
}; */

class Object //175
{
public:
	Object()
	{
		Position.SetAll(0.0f);
		Orientation.SetAll(0.0f);
		ChildPtr = nullptr;
		ChildNext = nullptr;
		ChildPrevious = nullptr;
		ChildConstraintPtr = nullptr;
		HostConstraintPtr = nullptr;
		AttachInfo = nullptr;
		HavokHandle = 0;
		//ContactInfo = Copy.ContactInfo;
		//ObjFlags = Copy.ObjFlags;
		//RemoteObjFlags = Copy.RemoteObjFlags;
		MPDcmoIndex = 0;
		CheckingReset = 0;
		NameIndex = 0;
		FlaggedNext = nullptr;
		FlaggedPrevious = nullptr;
		Handle = 0;
		Parent = 0;
		BPOHandle = nullptr;
		AllIndex = 0;
		TypeIndex = 0;
		SubtypeIndex = 0;
		ObjectType = 0;
		SubType = 0;
		//LastKnownBMin = Copy.LastKnownBMin;
		//LastKnownBMax = Copy.LastKnownBMax;
		SRID = 0;
	}
	Object(const Object& Copy)
	{
		Position = Copy.Position;
		Orientation = Copy.Orientation;
		ChildPtr = Copy.ChildPtr;
		ChildNext = Copy.ChildNext;
		ChildPrevious = Copy.ChildPrevious;
		ChildConstraintPtr = Copy.ChildConstraintPtr;
		HostConstraintPtr = Copy.HostConstraintPtr;
		AttachInfo = Copy.AttachInfo;
		HavokHandle = Copy.HavokHandle;
		ContactInfo = Copy.ContactInfo;
		ObjFlags = Copy.ObjFlags;
		RemoteObjFlags = Copy.RemoteObjFlags;
		MPDcmoIndex = Copy.MPDcmoIndex;
		CheckingReset = Copy.CheckingReset;
		NameIndex = Copy.NameIndex;
		FlaggedNext = Copy.FlaggedNext;
		FlaggedPrevious = Copy.FlaggedPrevious;
		Handle = Copy.Handle;
		Parent = Copy.Parent;
		BPOHandle = Copy.BPOHandle;
		AllIndex = Copy.AllIndex;
		TypeIndex = Copy.TypeIndex;
		SubtypeIndex = Copy.SubtypeIndex;
		ObjectType = Copy.ObjectType;
		SubType = Copy.SubType;
		LastKnownBMin = Copy.LastKnownBMin;
		LastKnownBMax = Copy.LastKnownBMax;
		SRID = Copy.SRID;
	}
	void* Vfptr; //ObjectVtbl* vfptr; //4 - Research this more later. Has some interesting members.
	vector Position; //12
	matrix Orientation; //36
	Object* ChildPtr; //4
	Object* ChildNext; //4
	Object* ChildPrevious; //4
	void* ChildConstraintPtr;///Constraint* child_constraint_ptr; //4, define later.
	void* HostConstraintPtr;///Constraint* host_constraint_ptr; //4
	AttachInfoData* AttachInfo; //4
	unsigned int HavokHandle; //4 //Starts at offset=76 (4C in hex)
	ObjectContactInfo ContactInfo; //4
	ObjectFlags ObjFlags; //23 - Play around with this in memory later, seems interesting.
	RemoteObjectFlags RemoteObjFlags; //5
	char MPDcmoIndex; //1
	int CheckingReset; //4
	unsigned __int16 NameIndex; //2
	Object* FlaggedNext; //4
	Object* FlaggedPrevious; //4
	unsigned int Handle; //4
	unsigned int Parent; //4
	HavokBPO* BPOHandle; //4
	unsigned __int16 AllIndex; //2
	unsigned __int16 TypeIndex; //2
	unsigned __int16 SubtypeIndex; //2
	char ObjectType; //1
	char SubType; //1
	vector LastKnownBMin; //12
	vector LastKnownBMax; //12
	unsigned int SRID; //4
};

class Human : public Object //3786 + 175 = 3961 Bytes
{
public:
	HumanResourceDependentDataContainer ResourceDependentData; //8
	HumanFlags Flags; //512
	HumanMPFlags MPFlags; //68
	int LastTriggerDownFrame; //4
	HumanInfo* Info;  //4 //Actual object size = 397 Bytes
	ObjectRenderDistance render_distance; //8
	char XRayMaterial; //1
	char XrayRenderAlpha; //1
	int Rank; //4
	vector ApproxLocalBmin; //12
	vector ApproxLocalBmax; //12
	vector LastPosition; //12 //646 Bytes including this member
	HumanPathData PathData; //280
	vector TurnToTarget; //12
	unsigned int NavCellDetourRequestHandle; //4
	HumanRaycastHitInfo RaycastHitInfo; //44
	vector Velocity; //12
	vector ActualVelocity; //12
	int TransformFramesSkipped; //4
	vector SteeringVector; //12
	float MoveSpeed; //4
	float SteeringHeadingOffset; //4
	HumanRotateDirection RotateDirection; //4, enum
	float StateSpeedThrottle; //4
	float RotateHeadingLeft; //4
	float RotateHeadingRight; //4
	float RotateInternalHeading; //4
	vector InertialMotion; //12
	unsigned int GroundObjectHandle; //4
	vector GroundObjectContactPos; //12
	int GroundObjectAltBodyIDX; //4
	int GroundObjectShapeKey; //4
	float GroundObjectNormal; //4
	unsigned int ObjectFilterHandle; //4
	int BlockMovementAnimation; //4
	vector BlockSteeringVector; //12
	BlockMovementTypes BlockMovementType; //4, enum
	float BlockSteeringHeadingOffset; //4
	int ReleasedMovementAnim; //4
	BlockMovementTypes ReleasedMovementType; //4, enum
	HumanStates CurrentState; //4, enum
	HumanMovementStates CurrentMovementState; //4, enum
	HumanStances CurrentStance; //4, enum
	HumanStances LastStance; //4, enum
	HumanMoveModes MovementMode; //4, enum
	HumanMoveSubmodes MovementSubmode; //4, enum
	HumanMoveModes PreviousMovementMode; //4, enum
	AnimationAction CustomFireAnimation; //4, enum
	float WalkAnimationSpeedPercentage; //4
	float FrametimeTally; //4
	float ActualVelocityMagnitude; //4
	float MaxSpeed; //4
	float FallingVelocityMagnitude; //4
	Timestamp NotMovingUpdate; //4
	CharacterInstance* CharInstance; //4
	void* ClothSim;///ClothSimulation* ClothSim; //4
	int BoneLODLevel; //4
	WeaponAnimationFlags WepAnimationFlags; //68
	HumanRagdollState RagdollState; //4, enum
	unsigned int RagdollSourceHumanHandle; //4
	int RagdollIDX; //4
	float RagdollBlendPercentage; //4
	vector RagdollLastFrameVelocity; //12
	float RagdollOnImpactTime; //4
	float RagdollOnImpactMinVelocity; //4
	Timestamp RagdollDamaged; //4
	float RootBoneOffset; //4
	unsigned int NanoMaterialFX[16]; //64
	unsigned int MaterialFXHandleForHeadSkin; //4
	unsigned int LastValidPositionBeforeRagdollIndex; //4
	vector LastValidPositionBeforeRagdoll[3]; //36
	int RagdollNumCollisionsWithWalker; //4 
	IK_Joint IK_Joints[4]; //40 * 4 = 160 Bytes
	__declspec(align(16)) HumanSpinebendData SpinebendData; //1120 Bytes. (1108, align(16) -> 1120)
	HumanHeadMorphing HeadMorphs; //126
	int InitialMaxHitPoints; //4
	int MaxHitPoints; //4
	float HitPoints; //4
	int MaxKnockdownHits; //4
	float KnockdownHits; //4
	Timestamp KnockdownTimestamp; //4
	Timestamp KnockdownTimeoutTimestamp; //4
	HumanCombat Combat; //230
	Timestamp CollisionDamageTimer; //4
	float CurrentCollisionDamage; //4
	Timestamp DoRagdollTimestamp; //4
	Timestamp FacialPoseTimestamp; //4
	Timestamp TurretHoldAnimations; //4
	float Cash; //4
	InventoryItem* Inventory; //4
	InventoryItem* DesiredEquippedInvItem; //4
	InventoryItem* LastEquippedWeapon; //4
	InventoryItem* SecondLastEquippedWeapon; //4
	InventoryItem* GrenadeWeapon; //4
	void* AnimationPropInfo;/// ItemInfo* AnimationPropInfo; ///4 *** Define later, has a lot of useful things such as mass, restitution, explosion_info, etc.
	unsigned int OffhandProjectileHandle; //4
	unsigned int ShieldHandle; //4
	Timestamp ReloadTimer; //4
	int EquipTagIndex; //4
	int EquipOffhandTagIndex; //4
	int RootBoneIndex; //4
	int LeftFootBoneIndex; //4
	int RightFootBoneIndex; //4
	int LeftShoulderBoneIndex; //4
	int RightShoulderBoneIndex; //4
	int LeftHandBoneIndex; //4
	int RightHandBoneIndex; //4
	int LeftHipBoneIndex; //4
	int RightHipBoneIndex; //4
	float RunStandBlendPoseWeight; //4
	float LeanWeight; //4
	vector LeanDirection; //12
	Timestamp LeanDisabled; //4
	vector LeanLastSteeringVector; //12
	FootPlant FootPlanted; //4, enum
	Timestamp FootPlantTime; //4
	bool IsTurning; //1
	bool StartingTurn; //1
	float RenderAlpha; //4
	float CameraAlphaOverride; //4
	bool CastsTransparentShadows; //1
	Timestamp FadeTimer; //4
	int FadeTime; //4
	float StealthPercent; //4
	unsigned int VehicleHandle; //4
	unsigned int ReservedVehicleHandle; //4
	VehicleSeatIndex VehicleSeatIDX; //4, enum
	Timestamp BoredIdleTimestamp; //4
	Timestamp CorpseCleanupTimer; //4
	Timestamp TurnOffFireTimestamp; //4
	Timestamp HealthRestoreTimestamp; //4
	float HealthRestoreHitPoints; //4
	float HealthRestoreMinimumHitPoints; //4
	vector LookAtPos; //12
	unsigned int LookAtHandle; //4
	float LookAtSpeed; //4
	vector AimOverrideDirection; //12
	float DamagePercent; //4
	unsigned __int16 DamageFunctionHandle; //2
	unsigned __int16 DeathFunctionHandle; //2
	Timestamp BreathTimer; //4
	Timestamp CrouchToStandTestTimestamp; //4
	unsigned int LadderHandle; //4
	float LadderSlideSpeed; //4
	int LadderGrabRung; //4
	int LadderSlidePlayID; //4
	bool CodeDrivenStartJump; //1
	float CodeDrivenJumpTimer; //4
	float CodeDrivenJumpHeight; //4
	Timestamp JumpStateTimer; //4
	Timestamp LastSupported; //4
	Timestamp AirTime; //4
	Timestamp UpdateTimer; //4
	ObjectImportanceLevel ImportanceLevel; //4, enum
	unsigned int ScriptedActionNodeHandle; //4
	nano_callback_info NanoCBInfo[16]; //12 * 16 = 192 Bytes
	int NanoIndex; //4 //3586 Bytes including this member
	human_action_node_data ActionNodeData; //54
	unsigned int LightEffects[2]; //8
	int LightTags[2]; //8
	Timestamp AvoidanceCheckTimer; //4
	Timestamp AvoidanceRequestTimer; //4
	unsigned int AvoidanceRequestHuman; //4
	vector AvoidanceMoveDirection; //12
	vector AvoidanceHintDirection; //12
	Timestamp AvoidancePauseTimer; //4
	HumanMovementStates AvoidanceOriginalMovementState; //4, enum
	int MinimapFlags; //4
	void* AmbPropInfo; /// AmbientPropInfo* AmbPropInfo; //4 //Has some attach point pointer, may be useful.
	InventoryItem* EquippedInventoryItemLastFrame; //4
	InventoryItem* EquippedInventoryItem; //4
	void* Voice;///HumanVoicePersona* Voice; //4
	HumanTeams CurrentTeam;  //4, enum
	HumanTeams UndercoverTeam; //4, enum
	int DialogueFoleyInfo; //4
	voice_line_handle QueuedVoiceLine; //4, enum
	VoiceLines SituationalVoiceLine; //4, enum
	VoiceLinePriorities VoicePriority; //4, enum
	AudiolibCuePriority VoiceCuePriority; //4, enum
	unsigned __int16 RadioInstance; //2
	int VoiceInstance; //4
	Timestamp VoiceTimeSinceFinish; //4
	LipsyncDataHandle LipsyncHandle; //4, enum
	Timestamp voice_delay_time; //4
	void* Unim_VoiceDelayCBCallback;//bool(__cdecl *voice_delay_cb)(Human*, void*); //4
	void* VoiceDelayCBData; //4
	Timestamp AcknowledgedTime; //4
	Timestamp ReportedTimer; //4
	Timestamp Lifetime; //4
};

class /*__declspec(align(8))*/ Player : public Human //5415 + 3961 = 9376 Bytes
{
public:
	float FrametimeMultiplier; //4
	UseableObject action_object; //24
	Timestamp action_object_timestamp; //4
	Timestamp last_fire_time; //4
	unsigned int mp_action_object_handle; //4
	int radio_id; //4
	int tag_trigger; //4
	TaggingSequence tag_seq; //4
	Timestamp tag_timer; //4
	int TagEffect; //4
	HudMessageHandle hud_message; //4
	unsigned int havok_filter_group; //4
	unsigned int aim_target; //4
	unsigned int penetrating_aim_target; //4
	vector penetrating_aim_pos; //12
	Timestamp aim_target_duration; //4
	unsigned int heat_seeking_target; //4
	vector aim_pos; //12
	Timestamp combat_target_update_time; //4
	float remote_charge_time; //4
	bool doing_remote_charge; //1
	PlayerZoomState zoom_state; //4
	PlayerZoomState previous_zoom_state; //4
	vector cover_vector; //12
	vector cover_vector_right; //12
	Timestamp entering_cover; //4
	Timestamp exiting_cover; //4
	float cover_move_vel; //4
	bool cover_approaching_edge; //1
	Timestamp cover_approaching_edge_ts; //4
	vector cover_edge_hit_pos; //12
	vector cover_edge_miss_pos; //12
	vector thrown_weapon_check_pos; //12
	int combat_move_queue; //4
	TimestampPercent previous_bullet_hit; //8
	float JetpackFuelPercent; //4
	int JetpackFoley; //4
	unsigned int JetpackEffect; //4
	bool AllowRagdoll; //1
	PlayerFlags PFlags; //176
	bool hold_object_available; //1
	unsigned int hold_object_handle; //4
	unsigned int abandoned_vehicles[3]; //12
	int num_abandoned_vehicles; //4
	CustomVehicle custom_vehicles[50]; //1000 
	CustomVehicle* custom_vehicle_list; //4
	CustomVehicle* custom_vehicle_free_list; //4
	int num_custom_vehicles; //4
	TimestampPercent dead_timestamp; //8
	unsigned int mat_fx_handle[16]; //64
	unsigned int current_mat_fx;  //4
	PlayerScriptMode script_mode; //4
	ScriptSpecificData script_data; //8
	void* Backpack;//MultiObjectBackpack* Backpack; //4 //Todo: Eventually define this one, will be nice to control backpacks.
	int mp_respawn_backpack_type; //4
	GameCommand mp_current_command; //268
	bool mp_remote_player_fired_this_frame; //1
	vector mp_camera_pos; //12
	matrix mp_camera_orient; //36
	vector2 mp_camera_angular_velocity; //8
	int mp_desired_weapon_slot; //4
	unsigned int mp_last_respawn_time; //4
	unsigned int mp_data; //4
	unsigned int mp_disarm_bomb_handle; //4
	MultiSimStateMP mp_sim_state; //810
	unsigned int mp_last_spawn_point_handle; //4
	MultiTimestamp mp_time_until_player_can_respawn; //4
	MultiTimestampPercent mp_time_until_player_leaves_invulnerable; //8
	void* MPSwapBackpack; ///MultiObjectBackpack* mp_swap_backpack; //4
	float mp_player_damage_history[16]; //64
	PlayerLadderState mp_ladder_state; //12
	vector mp_ragdoll_force; //12
	vector mp_ragdoll_pos; //12
	Timestamp mp_ragdoll_force_timeout; //4
	MultiplayerEdgeCorrectionInfo mp_edge_correction_info; //8
	MultiplayerBlockedInfo mp_blocked_info; //4
	vector mp_ragdoll_linear_velocity_aggregate; //12
	vector mp_ragdoll_angular_velocity_aggregate; //12
	float mp_simulation_time_used; //4
	float mp_simulation_time_accumulated; //4
	float mp_simulation_time_extrapolated; //4
	int jetpack_use_log_handle; //4
	int backpack_equip_log_handle; //4
	int district_log_handle; //4
	matrix43 camera_bone_transform; //48
	vector movement_velocity; //12
	vector2 direct_control_dir; //8
	vector direct_control_vel; //12
	vector cover_collision_normal; //12
	vector last_frame_cover_collision_normal; //12
	PlayerCoverTest cover_test_queue; //4
	Timestamp cover_delay_ts; //4
	Timestamp cover_enter_ts; //4
	Timestamp cover_exit_delay_ts; //4
	Timestamp cover_dive_capsule; //4
	Timestamp cover_lean_delay; //4
	float cover_root_offset; //4
	float spinebend_root_offset; //4
	Timestamp facial_idle; //4
	Timestamp footstep_propagate_time; //4
	Timestamp bump_into_propagate_time; //4
	unsigned int ammo_box_handle; //4
	Timestamp pathfind_time_out; //4 //3063
	InterfaceModes current_interface_mode; //4 enum
	unsigned int common_controls_allowed; //4
	unsigned int controls_general_allowed; //4
	unsigned int controls_on_foot_allowed; //4
	unsigned int controls_driving_allowed; //4
	unsigned int general_actions_allowed; //4
	Timestamp weapon_swap_Timestamp; //4
	Timestamp sprint_delay_Timestamp; //4
	Timestamp sprint_start_Timestamp; //4
	Timestamp jump_refresh_Timestamp; //4
	unsigned int ally_squad_handle; //4
	unsigned int escort_squad_handle; //4
	Timestamp check_squads_timer; //4
	PathfindNavInfo pathfind_info; //16
	DecalCircArrayQueue10 blood_decals; //92
	int blood_decals_fade_index; //4
	FileObject* activity_inventory_save_file; //4
	char activity_inventory_buffer[1024]; //1024
	Timestamp zoom_cancel_Timestamp; //4
	unsigned int non_inventory_item_handle; //4
	unsigned int last_vehicle_driven; //4
	matrix quick_turn_orient; //36
	float quick_turn_speed; //4
	PlayerMetadata Metadata; //928
	Timestamp radiation_Timestamp; //4
	float radiation_damage; //4
	int radiation_foley; //4
	Timestamp is_stuck_timer; //4
	vector last_stuck_pos; //12
	int ragdoll_override_get_up_time; //4
	TimestampPercent fade_backpack_time; //8
	Timestamp comm_tower_check_period; //4
	int NextRecord; //4
	PlayerPositionalRecord PositionalRecords[8]; //128
	Timestamp TrackingPeriod; //4 //5415
};

/* 5098 */
struct CharacterControllerFlags //40
{
	unsigned __int32 disable_gravity : 1; //4
	unsigned __int32 big_step : 1; //4
	unsigned __int32 is_supported : 1; //4
	unsigned __int32 sliding : 1; //4
	unsigned __int32 flat_surface_ahead : 1; //4
	unsigned __int32 no_surface_ahead : 1; //4
	unsigned __int32 near_big_step : 1; //4
	unsigned __int32 check_ragdoll : 1; //4
	unsigned __int32 is_pushed : 1; //4
	unsigned __int32 phantom_added_to_world : 1; //4
};

/* 5099 */
struct CharacterController
{
	void* CharacterProxy; //HKCustomCharacterProxy* CharacterProxy; //4
	float CurrentAngle; //4
	void* ShapePhantom; //HkpShapePhantom* ShapePhantom; //4
	CharacterControllerShapeMode ControllerShapeMode; //4, enum
	void* ControllerShape; //HkpShape* m_controller_shape[9]; //4 * 9 = 36
	void* CharacterListener; //MyCharacterListener* CharacterListener; //4
	CharacterControllerFlags Flags; //40
	Timestamp SlidingBuildup;; //4
	Timestamp StepdownTS; //4
	Timestamp SupportedTS; //4
	vector PushedVec; //12
	float LastFrameVertical; //4
	int HumanIsPotentiallyStuck; //4
	unsigned int SavedCollisionFilter; //4
	float FrametimeLeft; //4
};

